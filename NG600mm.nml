# 1 "NG600mm.pnml"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "NG600mm.pnml"
/*

 * This file is part of the NG600mm NewGRF.

 * NG600mm is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free

 * Software Foundation, version 2 or - upon your discretion - any later version.

 * NG600mm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with NG600mm. If not, see <http://www.gnu.org/licenses/>.

 */
# 9 "NG600mm.pnml"
/* Newgrf parameters */

# 1 "src/header.pnml" 1
/*

 * This file is part of the 600mm narrow gauge Set.

 * 600mm narrow gauge Set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free

 * Software Foundation, version 2 or - upon your discretion - any later version.

 * 600mm narrow gauge Set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with 600mm narrow gauge Set. If not, see <http://www.gnu.org/licenses/>.

 */
# 9 "src/header.pnml"
grf {
 grfid: "MC\02\11";
 name: string(STR_GRF_NAME);
 desc: string(STR_GRF_DESCRIPTION);
 version: 26;
 min_compatible_version: 25;
    param {
        param_purchase_cost {
            type: int;
            min_value: 0;
            max_value: 2;
            def_value: 1;
            name: string(STR_PARAM_NAME_PURCHASE_COST);
            desc: string(STR_PARAM_DESC_PURCHASE_COST);
            names: {
                        0: string(STR_PARAM_COST_H);
                        1: string(STR_PARAM_COST_N);
                        2: string(STR_PARAM_COST_D);
            };
        }
    }
    param {
        param_running_cost {
            type: int;
            min_value: 0;
            max_value: 2;
            def_value: 1;
            name: string(STR_PARAM_NAME_RUNNING_COST);
            desc: string(STR_PARAM_DESC_RUNNING_COST);
            names: {
                        0: string(STR_PARAM_COST_H);
                        1: string(STR_PARAM_COST_N);
                        2: string(STR_PARAM_COST_D);
            };
        }
    }
    param {
        param_build_cost {
            type: int;
            min_value: 0;
            max_value: 2;
            def_value: 1;
            name: string(STR_PARAM_NAME_BUILD_COST);
            desc: string(STR_PARAM_DESC_BUILD_COST);
            names: {
                        0: string(STR_PARAM_COST_H);
                        1: string(STR_PARAM_COST_N);
                        2: string(STR_PARAM_COST_D);
            };
        }
    }
    param {
        param_infra_cost {
            type: int;
            min_value: 0;
            max_value: 2;
            def_value: 1;
            name: string(STR_PARAM_NAME_INFRA_COST);
            desc: string(STR_PARAM_DESC_INFRA_COST);
            names: {
                        0: string(STR_PARAM_COST_H);
                        1: string(STR_PARAM_COST_N);
                        2: string(STR_PARAM_COST_D);
            };
        }
    }
    param {
        param_keep_old_vehs {
            type: bool;
            name: string(STR_PARAM_NAME_KEEP_OLD_VEHS);
            desc: string(STR_PARAM_DESC_KEEP_OLD_VEHS);
        }
    }
    param {
        param_disable_attach {
            type: bool;
            name: string(STR_PARAM_NAME_FORBID_ATTACH);
            desc: string(STR_PARAM_DESC_FORBID_ATTACH);
        }
    }
    param {
        param_enable_electric {
            type: bool;
            name: string(STR_PARAM_NAME_ENABLE_ELECTRIC);
            desc: string(STR_PARAM_DESC_ENABLE_ELECTRIC);
     def_value: 1;
        }
    }
}

//train_width_32_px = 1;
traininfo_y_offset = 2;

basecost {
    PR_BUILD_VEHICLE_TRAIN: param_purchase_cost - 4;
    PR_RUNNING_TRAIN_STEAM: param_running_cost - 3;
    PR_RUNNING_TRAIN_DIESEL: param_running_cost - 3;
    PR_RUNNING_TRAIN_ELECTRIC: param_running_cost - 3;
//    PR_BUILD_RAIL: param_build_cost - 5;
//    PR_MAINTENANCE_RAIL: param_infra_cost - 2;
//    PR_BUILD_DEPOT_TRAIN: - 4;
}
/*

basecost {

    PR_BUILD_VEHICLE_ROAD:     param_purchase_cost+2; //default double base give normal costs

    PR_RUNNING_ROADVEH:        param_running_cost+1; //default double base give normal costs

}

*/
# 12 "NG600mm.pnml" 2


/* Common definitions */

# 1 "src/defcommon.pnml" 1
// part of PKP 750mm set
// Graphic by matfre96
// NML code by McZapkie

//common switches/constants 


railtypetable {
  RAIL, ELRL, NGRL, NAAN, NBAN, MONO, MGLV, NG60, NG6R, NG6E
}
# 26 "src/defcommon.pnml"
cargotable {
    PASS, COAL, MAIL, OIL_, LVST, GOOD, GRAI, WOOD, IORE, STEL, VALU, PAPR, WHEA, FOOD, GOLD, RUBR,
    FRUT, MAIZ, CORE, WATR, DIAM, AORE, BEER, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, DYES, ENSP,
    FERT, FICR, FISH, FMSP, FRVG, GLAS, GRVL, LIME, MILK, MNSP, OLSD, PETR, PLAS, POTA, RCYC, RFPR,
    SAND, SCMT, SGBT, SGCN, SULP, TOUR, VEHI, WDPR, WOOL, GEAR, YETI, MNO2, COKE, SLAG, SASH, PORE,
    PHOS, NITR, IRON, METL, EOIL, QLME
}

/*

switch (FEAT_TRAINS, SELF, SWITCH_2UNITS_START_STOP, num_vehs_in_consist ) {

	0..3: return CB_RESULT_NO_TEXT;

	return string(STR_TRAIN_TOO_LONG);

}

*/
# 41 "src/defcommon.pnml"
switch (FEAT_TRAINS, SELF, SWITCH_2UNITS_START_STOP, num_vehs_in_consist ) {
 1..3: return CB_RESULT_ATTACH_ALLOW_IF_RAILTYPES;
 return string(STR_TRAIN_TOO_LONG);
}

switch(FEAT_TRAINS, SELF, switch_can_attach, ((grfid != str2number("MC\02\11")) && param_disable_attach)) {
   1: return CB_RESULT_ATTACH_DISALLOW;
   return CB_RESULT_ATTACH_ALLOW;
}
# 17 "NG600mm.pnml" 2
# 1 "src/spritetemplates.pnml" 1
// part of PKP 750mm narrow gauge Set
// Graphic by maftre96
// NML code by McZapkie, TadeuszD

/* sprite templates */

template tmpl_sprite_train_block5(y) {
// [left_x,   upper_y,    width,    height,    offset_x,    offset_y]
    [0, y, 8, 18, -3, -13]//-3,          -9 //-5 -9
    [16, y, 20, 16, -15, -9]
    [48, y, 28, 12, -8, -7]//-14,         -7
    [96, y, 20, 16, -2, -7]//-6,         -9  //10, 8
    [128, y, 8, 18, -3, -8]//-3,          -9 //-14,          -9
    [144, y, 20, 16, -19, -5]//-17,   -6 -13,         -9 //-10 -8
    [176, y, 28, 12, -16, -7] //-22,  -7 -14,         -6
    [224, y, 20, 16, -8, -10] //-6,         -9
}

template tmpl_sprite_purchase5(y) {
// [left_x,   upper_y,    width,    height,    offset_x,    offset_y]
    [176, y, 28, 12, -17, -7]
}

template tmpl_sprite_train_block4(y) {
// [left_x,   upper_y,    width,    height,    offset_x,    offset_y]
    [0, y, 8, 18, -3, -13]//
    [16, y, 20, 16, -8, -10]//-14,         -9
    [48, y, 28, 12, -7, -7]//
    [96, y, 20, 16, 1, -7]//-2,         -7
    [128, y, 8, 18, -3, -6]//-3,          -8
    [144, y, 20, 16, -21, -6]//-17,         -6
    [176, y, 28, 12, -20, -7] //-17,         -7
    [224, y, 20, 16, -13, -11] //-8,         -10
}

template tmpl_sprite_purchase4(y) {
// [left_x,   upper_y,    width,    height,    offset_x,    offset_y]
    [176, y, 28, 12, -22, -7]
}

template tmpl_sprite_train_block3(y) {
// [left_x,   upper_y,    width,    height,    offset_x,    offset_y]
    [0, y, 8, 18, -3, -14]//-3,          -13
    [16, y, 20, 16, -12, -9]//-14,         -9
    [48, y, 28, 12, -3, -7]//-7,         -7
    [96, y, 20, 16, 3, -5]//-2,         -7
    [128, y, 8, 18, -3, -7]//-3,          -8
    [144, y, 20, 16, -23, -4]//-17,         -6
    [176, y, 28, 12, -23, -7] //-17,         -7
    [224, y, 20, 16, -8, -10] //-8,         -10
}

template tmpl_sprite_purchase3(y) {
// [left_x,   upper_y,    width,    height,    offset_x,    offset_y]
    [176, y, 28, 12, -23, -7]
}

template tmpl_sprite_train_block5mirror(y) {
// [left_x,   upper_y,    width,    height,    offset_x,    offset_y]
    [0, y, 8, 18, -2, -13]
    [16, y, 20, 16, -13, -8]
    [48, y, 28, 12, -7, -7]
    [96, y, 20, 16, -1, -7]
    [0, y, 8, 18, -2, -8]
    [16, y, 20, 16, -19, -5]
    [48, y, 28, 12, -17, -7]
    [96, y, 20, 16, -7, -10]
}

template tmpl_sprite_purchase5mirror(y) {
// [left_x,   upper_y,    width,    height,    offset_x,    offset_y]
    [48, y, 28, 12, -17, -7]
}

template tmpl_sprite_train_block4mirror(y) {
// [left_x,   upper_y,    width,    height,    offset_x,    offset_y]
    [0, y, 8, 18, -3, -15]
    [16, y, 20, 16, -12, -9]
    [48, y, 28, 12, -7, -7]
    [96, y, 20, 16, -1, -7]
    [0, y, 8, 18, -3, -6]
    [16, y, 20, 16, -20, -5]
    [48, y, 28, 12, -19, -7]
    [96, y, 20, 16, -11, -12]
}

template tmpl_sprite_purchase4mirror(y) {
// [left_x,   upper_y,    width,    height,    offset_x,    offset_y]
    [48, y, 28, 12, -19, -7]
}

template tmpl_sprite_train_block3mirror(y) {
// [left_x,   upper_y,    width,    height,    offset_x,    offset_y]
    [0, y, 8, 18, -3, -15]
    [16, y, 20, 16, -12, -9]
    [48, y, 28, 12, -5, -7]
    [96, y, 20, 16, 1, -5]
    [0, y, 8, 18, -3, -7]
    [16, y, 20, 16, -22, -4]
    [48, y, 28, 12, -22, -7]
    [96, y, 20, 16, -9, -10]
}
//    [0,          y,       8,         18,        -2,          -13]
//    [16,         y,       20,        16,        -13,         -8]
//    [48,         y,       28,        12,        -7,         -7]
//    [96,         y,       20,        16,        -1,         -7]
//    [0,        y,       8,         18,        -2,          -8]
//    [16,        y,       20,        16,        -19,         -5]
//    [48,        y,       28,        12,        -17,         -7] 
//    [96,        y,       20,        16,        -7,         -10] 

template tmpl_sprite_purchase3mirror(y) {
// [left_x,   upper_y,    width,    height,    offset_x,    offset_y]
    [48, y, 28, 12, -21, -7]
}

//horse:

template template_sprite_window_sideview7(y) {
    [160, y, 28, 13, -15, -7, ANIM]
}

template template_spriteh(y) {
[8, y, 8, 22, -3,-11, ANIM]
[24, y, 20, 17, -11,-8, ANIM]
[52, y, 28, 13, -12, -7, ANIM]
[88, y, 20, 15, -3,-5, ANIM]
[116, y, 8, 20, -3,-10, ANIM]
[132, y, 20, 15, -17,-5, ANIM]
[160, y, 28, 13, -12,-7, ANIM]
[196, y, 20, 17, -8,-9, ANIM]
}

spriteset(invisible, "src/gfx/empty.png") {
 [0, 0]
}

//2horses
template template_sprite6(y) {
[8, y, 8, 17, -3,-9]
[24, y, 18, 14, -11,-7]
[50, y, 24, 13, -5, -10]
[82, y, 18, 16, -0,-8]
[108, y, 8, 17, -3,-9]
[124, y, 18, 16, -17,-6]
[150, y, 24, 13, -15,-9]
[182, y, 18, 14, -6,-8]
}
template template_sprite_window_sideview6(y) {
[150, y, 24, 13, -15,-9]
}
# 18 "NG600mm.pnml" 2
# 1 "src/palettes.pnml" 1
// This is part of Polish PKP Set 2.0 NewGRF, adapted for Polroad set.
// Don't include any headers inside this file!
// (c) Tadeusz Domagalski, GPL 2.0

// Sprites for recolouring cargoes in open wagons/trucks

// cargo colors:
# 160 "src/palettes.pnml"
/* pseudo2cc palettes */
# 229 "src/palettes.pnml"
palette_cargo_cc = reserve_sprites(18*16);

replace(palette_cargo_cc){
    recolour_sprite { 0xAA: 0x01; 0xAB: 0x01; 0xAC: 0x02; 0xAD: 0x02; 0xAE: 0x03; 0xAF: 0x04; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x01; 0xAC: 0x02; 0xAD: 0x02; 0xAE: 0x03; 0xAF: 0x04; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x01; 0xAC: 0x02; 0xAD: 0x02; 0xAE: 0x03; 0xAF: 0x04; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x01; 0xAC: 0x02; 0xAD: 0x02; 0xAE: 0x03; 0xAF: 0x04; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x01; 0xAC: 0x02; 0xAD: 0x02; 0xAE: 0x03; 0xAF: 0x04; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x01; 0xAC: 0x02; 0xAD: 0x02; 0xAE: 0x03; 0xAF: 0x04; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x01; 0xAC: 0x02; 0xAD: 0x02; 0xAE: 0x03; 0xAF: 0x04; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x01; 0xAC: 0x02; 0xAD: 0x02; 0xAE: 0x03; 0xAF: 0x04; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x01; 0xAC: 0x02; 0xAD: 0x02; 0xAE: 0x03; 0xAF: 0x04; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x01; 0xAC: 0x02; 0xAD: 0x02; 0xAE: 0x03; 0xAF: 0x04; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x01; 0xAC: 0x02; 0xAD: 0x02; 0xAE: 0x03; 0xAF: 0x04; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x01; 0xAC: 0x02; 0xAD: 0x02; 0xAE: 0x03; 0xAF: 0x04; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x01; 0xAC: 0x02; 0xAD: 0x02; 0xAE: 0x03; 0xAF: 0x04; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x01; 0xAC: 0x02; 0xAD: 0x02; 0xAE: 0x03; 0xAF: 0x04; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x01; 0xAC: 0x02; 0xAD: 0x02; 0xAE: 0x03; 0xAF: 0x04; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x01; 0xAC: 0x02; 0xAD: 0x02; 0xAE: 0x03; 0xAF: 0x04; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    recolour_sprite { 0xAA: 0x41; 0xAB: 0x42; 0xAC: 0x44; 0xAD: 0x33; 0xAE: 0x44; 0xAF: 0x45; 0xB0: 0x0E; 0xB1: 0x0F; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x41; 0xAB: 0x42; 0xAC: 0x44; 0xAD: 0x33; 0xAE: 0x44; 0xAF: 0x45; 0xB0: 0x0E; 0xB1: 0x0F; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x41; 0xAB: 0x42; 0xAC: 0x44; 0xAD: 0x33; 0xAE: 0x44; 0xAF: 0x45; 0xB0: 0x0E; 0xB1: 0x0F; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x41; 0xAB: 0x42; 0xAC: 0x44; 0xAD: 0x33; 0xAE: 0x44; 0xAF: 0x45; 0xB0: 0x0E; 0xB1: 0x0F; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x41; 0xAB: 0x42; 0xAC: 0x44; 0xAD: 0x33; 0xAE: 0x44; 0xAF: 0x45; 0xB0: 0x0E; 0xB1: 0x0F; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x41; 0xAB: 0x42; 0xAC: 0x44; 0xAD: 0x33; 0xAE: 0x44; 0xAF: 0x45; 0xB0: 0x0E; 0xB1: 0x0F; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x41; 0xAB: 0x42; 0xAC: 0x44; 0xAD: 0x33; 0xAE: 0x44; 0xAF: 0x45; 0xB0: 0x0E; 0xB1: 0x0F; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x41; 0xAB: 0x42; 0xAC: 0x44; 0xAD: 0x33; 0xAE: 0x44; 0xAF: 0x45; 0xB0: 0x0E; 0xB1: 0x0F; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x41; 0xAB: 0x42; 0xAC: 0x44; 0xAD: 0x33; 0xAE: 0x44; 0xAF: 0x45; 0xB0: 0x0E; 0xB1: 0x0F; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x41; 0xAB: 0x42; 0xAC: 0x44; 0xAD: 0x33; 0xAE: 0x44; 0xAF: 0x45; 0xB0: 0x0E; 0xB1: 0x0F; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x41; 0xAB: 0x42; 0xAC: 0x44; 0xAD: 0x33; 0xAE: 0x44; 0xAF: 0x45; 0xB0: 0x0E; 0xB1: 0x0F; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x41; 0xAB: 0x42; 0xAC: 0x44; 0xAD: 0x33; 0xAE: 0x44; 0xAF: 0x45; 0xB0: 0x0E; 0xB1: 0x0F; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x41; 0xAB: 0x42; 0xAC: 0x44; 0xAD: 0x33; 0xAE: 0x44; 0xAF: 0x45; 0xB0: 0x0E; 0xB1: 0x0F; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x41; 0xAB: 0x42; 0xAC: 0x44; 0xAD: 0x33; 0xAE: 0x44; 0xAF: 0x45; 0xB0: 0x0E; 0xB1: 0x0F; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x41; 0xAB: 0x42; 0xAC: 0x44; 0xAD: 0x33; 0xAE: 0x44; 0xAF: 0x45; 0xB0: 0x0E; 0xB1: 0x0F; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x41; 0xAB: 0x42; 0xAC: 0x44; 0xAD: 0x33; 0xAE: 0x44; 0xAF: 0x45; 0xB0: 0x0E; 0xB1: 0x0F; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    recolour_sprite { 0xAA: 0x69; 0xAB: 0x47; 0xAC: 0x48; 0xAD: 0x49; 0xAE: 0x4A; 0xAF: 0x4B; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x69; 0xAB: 0x47; 0xAC: 0x48; 0xAD: 0x49; 0xAE: 0x4A; 0xAF: 0x4B; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x69; 0xAB: 0x47; 0xAC: 0x48; 0xAD: 0x49; 0xAE: 0x4A; 0xAF: 0x4B; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x69; 0xAB: 0x47; 0xAC: 0x48; 0xAD: 0x49; 0xAE: 0x4A; 0xAF: 0x4B; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x69; 0xAB: 0x47; 0xAC: 0x48; 0xAD: 0x49; 0xAE: 0x4A; 0xAF: 0x4B; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x69; 0xAB: 0x47; 0xAC: 0x48; 0xAD: 0x49; 0xAE: 0x4A; 0xAF: 0x4B; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x69; 0xAB: 0x47; 0xAC: 0x48; 0xAD: 0x49; 0xAE: 0x4A; 0xAF: 0x4B; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x69; 0xAB: 0x47; 0xAC: 0x48; 0xAD: 0x49; 0xAE: 0x4A; 0xAF: 0x4B; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x69; 0xAB: 0x47; 0xAC: 0x48; 0xAD: 0x49; 0xAE: 0x4A; 0xAF: 0x4B; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x69; 0xAB: 0x47; 0xAC: 0x48; 0xAD: 0x49; 0xAE: 0x4A; 0xAF: 0x4B; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x69; 0xAB: 0x47; 0xAC: 0x48; 0xAD: 0x49; 0xAE: 0x4A; 0xAF: 0x4B; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x69; 0xAB: 0x47; 0xAC: 0x48; 0xAD: 0x49; 0xAE: 0x4A; 0xAF: 0x4B; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x69; 0xAB: 0x47; 0xAC: 0x48; 0xAD: 0x49; 0xAE: 0x4A; 0xAF: 0x4B; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x69; 0xAB: 0x47; 0xAC: 0x48; 0xAD: 0x49; 0xAE: 0x4A; 0xAF: 0x4B; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x69; 0xAB: 0x47; 0xAC: 0x48; 0xAD: 0x49; 0xAE: 0x4A; 0xAF: 0x4B; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x69; 0xAB: 0x47; 0xAC: 0x48; 0xAD: 0x49; 0xAE: 0x4A; 0xAF: 0x4B; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    recolour_sprite { 0xAA: 0x58; 0xAB: 0x19; 0xAC: 0x36; 0xAD: 0x1A; 0xAE: 0x37; 0xAF: 0x38; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x19; 0xAC: 0x36; 0xAD: 0x1A; 0xAE: 0x37; 0xAF: 0x38; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x19; 0xAC: 0x36; 0xAD: 0x1A; 0xAE: 0x37; 0xAF: 0x38; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x19; 0xAC: 0x36; 0xAD: 0x1A; 0xAE: 0x37; 0xAF: 0x38; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x19; 0xAC: 0x36; 0xAD: 0x1A; 0xAE: 0x37; 0xAF: 0x38; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x19; 0xAC: 0x36; 0xAD: 0x1A; 0xAE: 0x37; 0xAF: 0x38; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x19; 0xAC: 0x36; 0xAD: 0x1A; 0xAE: 0x37; 0xAF: 0x38; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x19; 0xAC: 0x36; 0xAD: 0x1A; 0xAE: 0x37; 0xAF: 0x38; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x19; 0xAC: 0x36; 0xAD: 0x1A; 0xAE: 0x37; 0xAF: 0x38; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x19; 0xAC: 0x36; 0xAD: 0x1A; 0xAE: 0x37; 0xAF: 0x38; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x19; 0xAC: 0x36; 0xAD: 0x1A; 0xAE: 0x37; 0xAF: 0x38; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x19; 0xAC: 0x36; 0xAD: 0x1A; 0xAE: 0x37; 0xAF: 0x38; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x19; 0xAC: 0x36; 0xAD: 0x1A; 0xAE: 0x37; 0xAF: 0x38; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x19; 0xAC: 0x36; 0xAD: 0x1A; 0xAE: 0x37; 0xAF: 0x38; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x19; 0xAC: 0x36; 0xAD: 0x1A; 0xAE: 0x37; 0xAF: 0x38; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x19; 0xAC: 0x36; 0xAD: 0x1A; 0xAE: 0x37; 0xAF: 0x38; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    recolour_sprite { 0xAA: 0x2A; 0xAB: 0x2B; 0xAC: 0x4A; 0xAD: 0x2C; 0xAE: 0xA2; 0xAF: 0x2E; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x2A; 0xAB: 0x2B; 0xAC: 0x4A; 0xAD: 0x2C; 0xAE: 0xA2; 0xAF: 0x2E; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x2A; 0xAB: 0x2B; 0xAC: 0x4A; 0xAD: 0x2C; 0xAE: 0xA2; 0xAF: 0x2E; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x2A; 0xAB: 0x2B; 0xAC: 0x4A; 0xAD: 0x2C; 0xAE: 0xA2; 0xAF: 0x2E; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x2A; 0xAB: 0x2B; 0xAC: 0x4A; 0xAD: 0x2C; 0xAE: 0xA2; 0xAF: 0x2E; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x2A; 0xAB: 0x2B; 0xAC: 0x4A; 0xAD: 0x2C; 0xAE: 0xA2; 0xAF: 0x2E; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x2A; 0xAB: 0x2B; 0xAC: 0x4A; 0xAD: 0x2C; 0xAE: 0xA2; 0xAF: 0x2E; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x2A; 0xAB: 0x2B; 0xAC: 0x4A; 0xAD: 0x2C; 0xAE: 0xA2; 0xAF: 0x2E; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x2A; 0xAB: 0x2B; 0xAC: 0x4A; 0xAD: 0x2C; 0xAE: 0xA2; 0xAF: 0x2E; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x2A; 0xAB: 0x2B; 0xAC: 0x4A; 0xAD: 0x2C; 0xAE: 0xA2; 0xAF: 0x2E; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x2A; 0xAB: 0x2B; 0xAC: 0x4A; 0xAD: 0x2C; 0xAE: 0xA2; 0xAF: 0x2E; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x2A; 0xAB: 0x2B; 0xAC: 0x4A; 0xAD: 0x2C; 0xAE: 0xA2; 0xAF: 0x2E; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x2A; 0xAB: 0x2B; 0xAC: 0x4A; 0xAD: 0x2C; 0xAE: 0xA2; 0xAF: 0x2E; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x2A; 0xAB: 0x2B; 0xAC: 0x4A; 0xAD: 0x2C; 0xAE: 0xA2; 0xAF: 0x2E; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x2A; 0xAB: 0x2B; 0xAC: 0x4A; 0xAD: 0x2C; 0xAE: 0xA2; 0xAF: 0x2E; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x2A; 0xAB: 0x2B; 0xAC: 0x4A; 0xAD: 0x2C; 0xAE: 0xA2; 0xAF: 0x2E; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x4C; 0xAD: 0x75; 0xAE: 0x25; 0xAF: 0x4F; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x4C; 0xAD: 0x75; 0xAE: 0x25; 0xAF: 0x4F; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x4C; 0xAD: 0x75; 0xAE: 0x25; 0xAF: 0x4F; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x4C; 0xAD: 0x75; 0xAE: 0x25; 0xAF: 0x4F; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x4C; 0xAD: 0x75; 0xAE: 0x25; 0xAF: 0x4F; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x4C; 0xAD: 0x75; 0xAE: 0x25; 0xAF: 0x4F; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x4C; 0xAD: 0x75; 0xAE: 0x25; 0xAF: 0x4F; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x4C; 0xAD: 0x75; 0xAE: 0x25; 0xAF: 0x4F; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x4C; 0xAD: 0x75; 0xAE: 0x25; 0xAF: 0x4F; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x4C; 0xAD: 0x75; 0xAE: 0x25; 0xAF: 0x4F; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x4C; 0xAD: 0x75; 0xAE: 0x25; 0xAF: 0x4F; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x4C; 0xAD: 0x75; 0xAE: 0x25; 0xAF: 0x4F; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x4C; 0xAD: 0x75; 0xAE: 0x25; 0xAF: 0x4F; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x4C; 0xAD: 0x75; 0xAE: 0x25; 0xAF: 0x4F; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x4C; 0xAD: 0x75; 0xAE: 0x25; 0xAF: 0x4F; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x4C; 0xAD: 0x75; 0xAE: 0x25; 0xAF: 0x4F; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    recolour_sprite { 0xAA: 0x07; 0xAB: 0x08; 0xAC: 0x09; 0xAD: 0x0A; 0xAE: 0x0B; 0xAF: 0x0C; 0xB0: 0x0D; 0xB1: 0x0E; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x07; 0xAB: 0x08; 0xAC: 0x09; 0xAD: 0x0A; 0xAE: 0x0B; 0xAF: 0x0C; 0xB0: 0x0D; 0xB1: 0x0E; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x07; 0xAB: 0x08; 0xAC: 0x09; 0xAD: 0x0A; 0xAE: 0x0B; 0xAF: 0x0C; 0xB0: 0x0D; 0xB1: 0x0E; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x07; 0xAB: 0x08; 0xAC: 0x09; 0xAD: 0x0A; 0xAE: 0x0B; 0xAF: 0x0C; 0xB0: 0x0D; 0xB1: 0x0E; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x07; 0xAB: 0x08; 0xAC: 0x09; 0xAD: 0x0A; 0xAE: 0x0B; 0xAF: 0x0C; 0xB0: 0x0D; 0xB1: 0x0E; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x07; 0xAB: 0x08; 0xAC: 0x09; 0xAD: 0x0A; 0xAE: 0x0B; 0xAF: 0x0C; 0xB0: 0x0D; 0xB1: 0x0E; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x07; 0xAB: 0x08; 0xAC: 0x09; 0xAD: 0x0A; 0xAE: 0x0B; 0xAF: 0x0C; 0xB0: 0x0D; 0xB1: 0x0E; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x07; 0xAB: 0x08; 0xAC: 0x09; 0xAD: 0x0A; 0xAE: 0x0B; 0xAF: 0x0C; 0xB0: 0x0D; 0xB1: 0x0E; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x07; 0xAB: 0x08; 0xAC: 0x09; 0xAD: 0x0A; 0xAE: 0x0B; 0xAF: 0x0C; 0xB0: 0x0D; 0xB1: 0x0E; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x07; 0xAB: 0x08; 0xAC: 0x09; 0xAD: 0x0A; 0xAE: 0x0B; 0xAF: 0x0C; 0xB0: 0x0D; 0xB1: 0x0E; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x07; 0xAB: 0x08; 0xAC: 0x09; 0xAD: 0x0A; 0xAE: 0x0B; 0xAF: 0x0C; 0xB0: 0x0D; 0xB1: 0x0E; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x07; 0xAB: 0x08; 0xAC: 0x09; 0xAD: 0x0A; 0xAE: 0x0B; 0xAF: 0x0C; 0xB0: 0x0D; 0xB1: 0x0E; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x07; 0xAB: 0x08; 0xAC: 0x09; 0xAD: 0x0A; 0xAE: 0x0B; 0xAF: 0x0C; 0xB0: 0x0D; 0xB1: 0x0E; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x07; 0xAB: 0x08; 0xAC: 0x09; 0xAD: 0x0A; 0xAE: 0x0B; 0xAF: 0x0C; 0xB0: 0x0D; 0xB1: 0x0E; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x07; 0xAB: 0x08; 0xAC: 0x09; 0xAD: 0x0A; 0xAE: 0x0B; 0xAF: 0x0C; 0xB0: 0x0D; 0xB1: 0x0E; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x07; 0xAB: 0x08; 0xAC: 0x09; 0xAD: 0x0A; 0xAE: 0x0B; 0xAF: 0x0C; 0xB0: 0x0D; 0xB1: 0x0E; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    recolour_sprite { 0xAA: 0x08; 0xAB: 0x0A; 0xAC: 0x1E; 0xAD: 0x0B; 0xAE: 0x3B; 0xAF: 0x0C; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x08; 0xAB: 0x0A; 0xAC: 0x1E; 0xAD: 0x0B; 0xAE: 0x3B; 0xAF: 0x0C; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x08; 0xAB: 0x0A; 0xAC: 0x1E; 0xAD: 0x0B; 0xAE: 0x3B; 0xAF: 0x0C; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x08; 0xAB: 0x0A; 0xAC: 0x1E; 0xAD: 0x0B; 0xAE: 0x3B; 0xAF: 0x0C; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x08; 0xAB: 0x0A; 0xAC: 0x1E; 0xAD: 0x0B; 0xAE: 0x3B; 0xAF: 0x0C; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x08; 0xAB: 0x0A; 0xAC: 0x1E; 0xAD: 0x0B; 0xAE: 0x3B; 0xAF: 0x0C; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x08; 0xAB: 0x0A; 0xAC: 0x1E; 0xAD: 0x0B; 0xAE: 0x3B; 0xAF: 0x0C; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x08; 0xAB: 0x0A; 0xAC: 0x1E; 0xAD: 0x0B; 0xAE: 0x3B; 0xAF: 0x0C; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x08; 0xAB: 0x0A; 0xAC: 0x1E; 0xAD: 0x0B; 0xAE: 0x3B; 0xAF: 0x0C; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x08; 0xAB: 0x0A; 0xAC: 0x1E; 0xAD: 0x0B; 0xAE: 0x3B; 0xAF: 0x0C; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x08; 0xAB: 0x0A; 0xAC: 0x1E; 0xAD: 0x0B; 0xAE: 0x3B; 0xAF: 0x0C; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x08; 0xAB: 0x0A; 0xAC: 0x1E; 0xAD: 0x0B; 0xAE: 0x3B; 0xAF: 0x0C; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x08; 0xAB: 0x0A; 0xAC: 0x1E; 0xAD: 0x0B; 0xAE: 0x3B; 0xAF: 0x0C; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x08; 0xAB: 0x0A; 0xAC: 0x1E; 0xAD: 0x0B; 0xAE: 0x3B; 0xAF: 0x0C; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x08; 0xAB: 0x0A; 0xAC: 0x1E; 0xAD: 0x0B; 0xAE: 0x3B; 0xAF: 0x0C; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x08; 0xAB: 0x0A; 0xAC: 0x1E; 0xAD: 0x0B; 0xAE: 0x3B; 0xAF: 0x0C; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x38; 0xAD: 0x5C; 0xAE: 0x6F; 0xAF: 0x5E; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x38; 0xAD: 0x5C; 0xAE: 0x6F; 0xAF: 0x5E; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x38; 0xAD: 0x5C; 0xAE: 0x6F; 0xAF: 0x5E; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x38; 0xAD: 0x5C; 0xAE: 0x6F; 0xAF: 0x5E; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x38; 0xAD: 0x5C; 0xAE: 0x6F; 0xAF: 0x5E; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x38; 0xAD: 0x5C; 0xAE: 0x6F; 0xAF: 0x5E; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x38; 0xAD: 0x5C; 0xAE: 0x6F; 0xAF: 0x5E; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x38; 0xAD: 0x5C; 0xAE: 0x6F; 0xAF: 0x5E; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x38; 0xAD: 0x5C; 0xAE: 0x6F; 0xAF: 0x5E; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x38; 0xAD: 0x5C; 0xAE: 0x6F; 0xAF: 0x5E; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x38; 0xAD: 0x5C; 0xAE: 0x6F; 0xAF: 0x5E; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x38; 0xAD: 0x5C; 0xAE: 0x6F; 0xAF: 0x5E; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x38; 0xAD: 0x5C; 0xAE: 0x6F; 0xAF: 0x5E; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x38; 0xAD: 0x5C; 0xAE: 0x6F; 0xAF: 0x5E; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x38; 0xAD: 0x5C; 0xAE: 0x6F; 0xAF: 0x5E; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6D; 0xAC: 0x38; 0xAD: 0x5C; 0xAE: 0x6F; 0xAF: 0x5E; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    recolour_sprite { 0xAA: 0x6F; 0xAB: 0x3A; 0xAC: 0x1E; 0xAD: 0x3B; 0xAE: 0x26; 0xAF: 0x27; 0xB0: 0x44; 0xB1: 0x45; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x6F; 0xAB: 0x3A; 0xAC: 0x1E; 0xAD: 0x3B; 0xAE: 0x26; 0xAF: 0x27; 0xB0: 0x44; 0xB1: 0x45; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x6F; 0xAB: 0x3A; 0xAC: 0x1E; 0xAD: 0x3B; 0xAE: 0x26; 0xAF: 0x27; 0xB0: 0x44; 0xB1: 0x45; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x6F; 0xAB: 0x3A; 0xAC: 0x1E; 0xAD: 0x3B; 0xAE: 0x26; 0xAF: 0x27; 0xB0: 0x44; 0xB1: 0x45; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x6F; 0xAB: 0x3A; 0xAC: 0x1E; 0xAD: 0x3B; 0xAE: 0x26; 0xAF: 0x27; 0xB0: 0x44; 0xB1: 0x45; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x6F; 0xAB: 0x3A; 0xAC: 0x1E; 0xAD: 0x3B; 0xAE: 0x26; 0xAF: 0x27; 0xB0: 0x44; 0xB1: 0x45; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x6F; 0xAB: 0x3A; 0xAC: 0x1E; 0xAD: 0x3B; 0xAE: 0x26; 0xAF: 0x27; 0xB0: 0x44; 0xB1: 0x45; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x6F; 0xAB: 0x3A; 0xAC: 0x1E; 0xAD: 0x3B; 0xAE: 0x26; 0xAF: 0x27; 0xB0: 0x44; 0xB1: 0x45; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x6F; 0xAB: 0x3A; 0xAC: 0x1E; 0xAD: 0x3B; 0xAE: 0x26; 0xAF: 0x27; 0xB0: 0x44; 0xB1: 0x45; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x6F; 0xAB: 0x3A; 0xAC: 0x1E; 0xAD: 0x3B; 0xAE: 0x26; 0xAF: 0x27; 0xB0: 0x44; 0xB1: 0x45; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x6F; 0xAB: 0x3A; 0xAC: 0x1E; 0xAD: 0x3B; 0xAE: 0x26; 0xAF: 0x27; 0xB0: 0x44; 0xB1: 0x45; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x6F; 0xAB: 0x3A; 0xAC: 0x1E; 0xAD: 0x3B; 0xAE: 0x26; 0xAF: 0x27; 0xB0: 0x44; 0xB1: 0x45; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x6F; 0xAB: 0x3A; 0xAC: 0x1E; 0xAD: 0x3B; 0xAE: 0x26; 0xAF: 0x27; 0xB0: 0x44; 0xB1: 0x45; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x6F; 0xAB: 0x3A; 0xAC: 0x1E; 0xAD: 0x3B; 0xAE: 0x26; 0xAF: 0x27; 0xB0: 0x44; 0xB1: 0x45; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x6F; 0xAB: 0x3A; 0xAC: 0x1E; 0xAD: 0x3B; 0xAE: 0x26; 0xAF: 0x27; 0xB0: 0x44; 0xB1: 0x45; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x6F; 0xAB: 0x3A; 0xAC: 0x1E; 0xAD: 0x3B; 0xAE: 0x26; 0xAF: 0x27; 0xB0: 0x44; 0xB1: 0x45; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    recolour_sprite { 0xAA: 0x02; 0xAB: 0x03; 0xAC: 0x7B; 0xAD: 0x11; 0xAE: 0x72; 0xAF: 0x4D; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x03; 0xAC: 0x7B; 0xAD: 0x11; 0xAE: 0x72; 0xAF: 0x4D; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x03; 0xAC: 0x7B; 0xAD: 0x11; 0xAE: 0x72; 0xAF: 0x4D; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x03; 0xAC: 0x7B; 0xAD: 0x11; 0xAE: 0x72; 0xAF: 0x4D; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x03; 0xAC: 0x7B; 0xAD: 0x11; 0xAE: 0x72; 0xAF: 0x4D; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x03; 0xAC: 0x7B; 0xAD: 0x11; 0xAE: 0x72; 0xAF: 0x4D; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x03; 0xAC: 0x7B; 0xAD: 0x11; 0xAE: 0x72; 0xAF: 0x4D; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x03; 0xAC: 0x7B; 0xAD: 0x11; 0xAE: 0x72; 0xAF: 0x4D; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x03; 0xAC: 0x7B; 0xAD: 0x11; 0xAE: 0x72; 0xAF: 0x4D; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x03; 0xAC: 0x7B; 0xAD: 0x11; 0xAE: 0x72; 0xAF: 0x4D; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x03; 0xAC: 0x7B; 0xAD: 0x11; 0xAE: 0x72; 0xAF: 0x4D; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x03; 0xAC: 0x7B; 0xAD: 0x11; 0xAE: 0x72; 0xAF: 0x4D; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x03; 0xAC: 0x7B; 0xAD: 0x11; 0xAE: 0x72; 0xAF: 0x4D; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x03; 0xAC: 0x7B; 0xAD: 0x11; 0xAE: 0x72; 0xAF: 0x4D; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x03; 0xAC: 0x7B; 0xAD: 0x11; 0xAE: 0x72; 0xAF: 0x4D; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x03; 0xAC: 0x7B; 0xAD: 0x11; 0xAE: 0x72; 0xAF: 0x4D; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    recolour_sprite { 0xAA: 0x22; 0xAB: 0x6F; 0xAC: 0x78; 0xAD: 0x1F; 0xAE: 0x27; 0xAF: 0xA9; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6F; 0xAC: 0x78; 0xAD: 0x1F; 0xAE: 0x27; 0xAF: 0xA9; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6F; 0xAC: 0x78; 0xAD: 0x1F; 0xAE: 0x27; 0xAF: 0xA9; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6F; 0xAC: 0x78; 0xAD: 0x1F; 0xAE: 0x27; 0xAF: 0xA9; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6F; 0xAC: 0x78; 0xAD: 0x1F; 0xAE: 0x27; 0xAF: 0xA9; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6F; 0xAC: 0x78; 0xAD: 0x1F; 0xAE: 0x27; 0xAF: 0xA9; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6F; 0xAC: 0x78; 0xAD: 0x1F; 0xAE: 0x27; 0xAF: 0xA9; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6F; 0xAC: 0x78; 0xAD: 0x1F; 0xAE: 0x27; 0xAF: 0xA9; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6F; 0xAC: 0x78; 0xAD: 0x1F; 0xAE: 0x27; 0xAF: 0xA9; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6F; 0xAC: 0x78; 0xAD: 0x1F; 0xAE: 0x27; 0xAF: 0xA9; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6F; 0xAC: 0x78; 0xAD: 0x1F; 0xAE: 0x27; 0xAF: 0xA9; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6F; 0xAC: 0x78; 0xAD: 0x1F; 0xAE: 0x27; 0xAF: 0xA9; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6F; 0xAC: 0x78; 0xAD: 0x1F; 0xAE: 0x27; 0xAF: 0xA9; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6F; 0xAC: 0x78; 0xAD: 0x1F; 0xAE: 0x27; 0xAF: 0xA9; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6F; 0xAC: 0x78; 0xAD: 0x1F; 0xAE: 0x27; 0xAF: 0xA9; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x22; 0xAB: 0x6F; 0xAC: 0x78; 0xAD: 0x1F; 0xAE: 0x27; 0xAF: 0xA9; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    recolour_sprite { 0xAA: 0x40; 0xAB: 0x41; 0xAC: 0x57; 0xAD: 0x5E; 0xAE: 0x42; 0xAF: 0x32; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x40; 0xAB: 0x41; 0xAC: 0x57; 0xAD: 0x5E; 0xAE: 0x42; 0xAF: 0x32; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x40; 0xAB: 0x41; 0xAC: 0x57; 0xAD: 0x5E; 0xAE: 0x42; 0xAF: 0x32; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x40; 0xAB: 0x41; 0xAC: 0x57; 0xAD: 0x5E; 0xAE: 0x42; 0xAF: 0x32; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x40; 0xAB: 0x41; 0xAC: 0x57; 0xAD: 0x5E; 0xAE: 0x42; 0xAF: 0x32; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x40; 0xAB: 0x41; 0xAC: 0x57; 0xAD: 0x5E; 0xAE: 0x42; 0xAF: 0x32; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x40; 0xAB: 0x41; 0xAC: 0x57; 0xAD: 0x5E; 0xAE: 0x42; 0xAF: 0x32; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x40; 0xAB: 0x41; 0xAC: 0x57; 0xAD: 0x5E; 0xAE: 0x42; 0xAF: 0x32; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x40; 0xAB: 0x41; 0xAC: 0x57; 0xAD: 0x5E; 0xAE: 0x42; 0xAF: 0x32; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x40; 0xAB: 0x41; 0xAC: 0x57; 0xAD: 0x5E; 0xAE: 0x42; 0xAF: 0x32; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x40; 0xAB: 0x41; 0xAC: 0x57; 0xAD: 0x5E; 0xAE: 0x42; 0xAF: 0x32; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x40; 0xAB: 0x41; 0xAC: 0x57; 0xAD: 0x5E; 0xAE: 0x42; 0xAF: 0x32; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x40; 0xAB: 0x41; 0xAC: 0x57; 0xAD: 0x5E; 0xAE: 0x42; 0xAF: 0x32; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x40; 0xAB: 0x41; 0xAC: 0x57; 0xAD: 0x5E; 0xAE: 0x42; 0xAF: 0x32; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x40; 0xAB: 0x41; 0xAC: 0x57; 0xAD: 0x5E; 0xAE: 0x42; 0xAF: 0x32; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x40; 0xAB: 0x41; 0xAC: 0x57; 0xAD: 0x5E; 0xAE: 0x42; 0xAF: 0x32; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    recolour_sprite { 0xAA: 0x58; 0xAB: 0x40; 0xAC: 0x1D; 0xAD: 0xC2; 0xAE: 0x42; 0xAF: 0xD1; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x40; 0xAC: 0x1D; 0xAD: 0xC2; 0xAE: 0x42; 0xAF: 0xD1; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x40; 0xAC: 0x1D; 0xAD: 0xC2; 0xAE: 0x42; 0xAF: 0xD1; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x40; 0xAC: 0x1D; 0xAD: 0xC2; 0xAE: 0x42; 0xAF: 0xD1; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x40; 0xAC: 0x1D; 0xAD: 0xC2; 0xAE: 0x42; 0xAF: 0xD1; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x40; 0xAC: 0x1D; 0xAD: 0xC2; 0xAE: 0x42; 0xAF: 0xD1; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x40; 0xAC: 0x1D; 0xAD: 0xC2; 0xAE: 0x42; 0xAF: 0xD1; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x40; 0xAC: 0x1D; 0xAD: 0xC2; 0xAE: 0x42; 0xAF: 0xD1; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x40; 0xAC: 0x1D; 0xAD: 0xC2; 0xAE: 0x42; 0xAF: 0xD1; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x40; 0xAC: 0x1D; 0xAD: 0xC2; 0xAE: 0x42; 0xAF: 0xD1; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x40; 0xAC: 0x1D; 0xAD: 0xC2; 0xAE: 0x42; 0xAF: 0xD1; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x40; 0xAC: 0x1D; 0xAD: 0xC2; 0xAE: 0x42; 0xAF: 0xD1; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x40; 0xAC: 0x1D; 0xAD: 0xC2; 0xAE: 0x42; 0xAF: 0xD1; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x40; 0xAC: 0x1D; 0xAD: 0xC2; 0xAE: 0x42; 0xAF: 0xD1; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x40; 0xAC: 0x1D; 0xAD: 0xC2; 0xAE: 0x42; 0xAF: 0xD1; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x58; 0xAB: 0x40; 0xAC: 0x1D; 0xAD: 0xC2; 0xAE: 0x42; 0xAF: 0xD1; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    recolour_sprite { 0xAA: 0x02; 0xAB: 0x28; 0xAC: 0x46; 0xAD: 0x80; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x28; 0xAC: 0x46; 0xAD: 0x80; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x28; 0xAC: 0x46; 0xAD: 0x80; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x28; 0xAC: 0x46; 0xAD: 0x80; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x28; 0xAC: 0x46; 0xAD: 0x80; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x28; 0xAC: 0x46; 0xAD: 0x80; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x28; 0xAC: 0x46; 0xAD: 0x80; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x28; 0xAC: 0x46; 0xAD: 0x80; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x28; 0xAC: 0x46; 0xAD: 0x80; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x28; 0xAC: 0x46; 0xAD: 0x80; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x28; 0xAC: 0x46; 0xAD: 0x80; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x28; 0xAC: 0x46; 0xAD: 0x80; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x28; 0xAC: 0x46; 0xAD: 0x80; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x28; 0xAC: 0x46; 0xAD: 0x80; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x28; 0xAC: 0x46; 0xAD: 0x80; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x02; 0xAB: 0x28; 0xAC: 0x46; 0xAD: 0x80; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    recolour_sprite { 0xAA: 0x01; 0xAB: 0x02; 0xAC: 0x04; 0xAD: 0x05; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x02; 0xAC: 0x04; 0xAD: 0x05; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x02; 0xAC: 0x04; 0xAD: 0x05; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x02; 0xAC: 0x04; 0xAD: 0x05; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x02; 0xAC: 0x04; 0xAD: 0x05; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x02; 0xAC: 0x04; 0xAD: 0x05; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x02; 0xAC: 0x04; 0xAD: 0x05; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x02; 0xAC: 0x04; 0xAD: 0x05; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x02; 0xAC: 0x04; 0xAD: 0x05; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x02; 0xAC: 0x04; 0xAD: 0x05; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x02; 0xAC: 0x04; 0xAD: 0x05; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x02; 0xAC: 0x04; 0xAD: 0x05; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x02; 0xAC: 0x04; 0xAD: 0x05; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x02; 0xAC: 0x04; 0xAD: 0x05; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x02; 0xAC: 0x04; 0xAD: 0x05; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x01; 0xAB: 0x02; 0xAC: 0x04; 0xAD: 0x05; 0xAE: 0x10; 0xAF: 0x11; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    recolour_sprite { 0xAA: 0x18; 0xAB: 0x01; 0xAC: 0xB3; 0xAD: 0x35; 0xAE: 0x36; 0xAF: 0x38; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x18; 0xAB: 0x01; 0xAC: 0xB3; 0xAD: 0x35; 0xAE: 0x36; 0xAF: 0x38; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x18; 0xAB: 0x01; 0xAC: 0xB3; 0xAD: 0x35; 0xAE: 0x36; 0xAF: 0x38; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x18; 0xAB: 0x01; 0xAC: 0xB3; 0xAD: 0x35; 0xAE: 0x36; 0xAF: 0x38; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x18; 0xAB: 0x01; 0xAC: 0xB3; 0xAD: 0x35; 0xAE: 0x36; 0xAF: 0x38; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x18; 0xAB: 0x01; 0xAC: 0xB3; 0xAD: 0x35; 0xAE: 0x36; 0xAF: 0x38; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x18; 0xAB: 0x01; 0xAC: 0xB3; 0xAD: 0x35; 0xAE: 0x36; 0xAF: 0x38; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x18; 0xAB: 0x01; 0xAC: 0xB3; 0xAD: 0x35; 0xAE: 0x36; 0xAF: 0x38; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x18; 0xAB: 0x01; 0xAC: 0xB3; 0xAD: 0x35; 0xAE: 0x36; 0xAF: 0x38; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x18; 0xAB: 0x01; 0xAC: 0xB3; 0xAD: 0x35; 0xAE: 0x36; 0xAF: 0x38; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x18; 0xAB: 0x01; 0xAC: 0xB3; 0xAD: 0x35; 0xAE: 0x36; 0xAF: 0x38; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x18; 0xAB: 0x01; 0xAC: 0xB3; 0xAD: 0x35; 0xAE: 0x36; 0xAF: 0x38; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x18; 0xAB: 0x01; 0xAC: 0xB3; 0xAD: 0x35; 0xAE: 0x36; 0xAF: 0x38; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x18; 0xAB: 0x01; 0xAC: 0xB3; 0xAD: 0x35; 0xAE: 0x36; 0xAF: 0x38; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x18; 0xAB: 0x01; 0xAC: 0xB3; 0xAD: 0x35; 0xAE: 0x36; 0xAF: 0x38; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x18; 0xAB: 0x01; 0xAC: 0xB3; 0xAD: 0x35; 0xAE: 0x36; 0xAF: 0x38; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    recolour_sprite { 0xAA: 0x16; 0xAB: 0x0B; 0xAC: 0x0C; 0xAD: 0x17; 0xAE: 0x0D; 0xAF: 0x0E; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; } recolour_sprite { 0xAA: 0x16; 0xAB: 0x0B; 0xAC: 0x0C; 0xAD: 0x17; 0xAE: 0x0D; 0xAF: 0x0E; 0xC6: 0x51; 0xC7: 0x52; 0xC8: 0x53; 0xC9: 0x54; 0xCA: 0xCE; 0xCB: 0xCF; 0xCC: 0xD0; 0xCD: 0xD1; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x16; 0xAB: 0x0B; 0xAC: 0x0C; 0xAD: 0x17; 0xAE: 0x0D; 0xAF: 0x0E; 0xC6: 0x48; 0xC7: 0x49; 0xC8: 0x4A; 0xC9: 0x4B; 0xCA: 0x4C; 0xCB: 0x4D; 0xCC: 0x4E; 0xCD: 0x4F; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x16; 0xAB: 0x0B; 0xAC: 0x0C; 0xAD: 0x17; 0xAE: 0x0D; 0xAF: 0x0E; 0xC6: 0x3F; 0xC7: 0x40; 0xC8: 0xBC; 0xC9: 0xBD; 0xCA: 0xBE; 0xCB: 0xBF; 0xCC: 0x33; 0xCD: 0x34; 0x50: 0x03; 0x51: 0x04; 0x52: 0x05; 0x53: 0x06; 0x54: 0x13; 0x55: 0x14; 0x56: 0x15; 0x57: 0x16; } recolour_sprite { 0xAA: 0x16; 0xAB: 0x0B; 0xAC: 0x0C; 0xAD: 0x17; 0xAE: 0x0D; 0xAF: 0x0E; 0xC6: 0xB2; 0xC7: 0xB3; 0xC8: 0xB4; 0xC9: 0xB5; 0xCA: 0xB6; 0xCB: 0xB7; 0xCC: 0xB8; 0xCD: 0xB9; 0x50: 0xBB; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x34; 0x56: 0x44; 0x57: 0x45; } recolour_sprite { 0xAA: 0x16; 0xAB: 0x0B; 0xAC: 0x0C; 0xAD: 0x17; 0xAE: 0x0D; 0xAF: 0x0E; 0xC6: 0x92; 0xC7: 0x93; 0xC8: 0x94; 0xC9: 0x95; 0xCA: 0x96; 0xCB: 0x97; 0xCC: 0x98; 0xCD: 0x99; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x16; 0xAB: 0x0B; 0xAC: 0x0C; 0xAD: 0x17; 0xAE: 0x0D; 0xAF: 0x0E; 0xC6: 0x50; 0xC7: 0x51; 0xC8: 0x52; 0xC9: 0x53; 0xCA: 0x54; 0xCB: 0x55; 0xCC: 0x56; 0xCD: 0x57; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x16; 0xAB: 0x0B; 0xAC: 0x0C; 0xAD: 0x17; 0xAE: 0x0D; 0xAF: 0x0E; 0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x68; 0x51: 0x69; 0x52: 0x6A; 0x53: 0x6B; 0x54: 0x6C; 0x55: 0x6D; 0x56: 0x6E; 0x57: 0x6F; } recolour_sprite { 0xAA: 0x16; 0xAB: 0x0B; 0xAC: 0x0C; 0xAD: 0x17; 0xAE: 0x0D; 0xAF: 0x0E; 0xC6: 0x91; 0xC7: 0x92; 0xC8: 0x93; 0xC9: 0x94; 0xCA: 0x95; 0xCB: 0x96; 0xCC: 0x97; 0xCD: 0x98; 0x50: 0x40; 0x51: 0xBC; 0x52: 0xBD; 0x53: 0xBE; 0x54: 0xBF; 0x55: 0x33; 0x56: 0x34; 0x57: 0x45; } recolour_sprite { 0xAA: 0x16; 0xAB: 0x0B; 0xAC: 0x0C; 0xAD: 0x17; 0xAE: 0x0D; 0xAF: 0x0E; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; 0x50: 0x10; 0x51: 0x11; 0x52: 0x12; 0x53: 0x13; 0x54: 0x14; 0x55: 0x15; 0x56: 0x16; 0x57: 0x17; } recolour_sprite { 0xAA: 0x16; 0xAB: 0x0B; 0xAC: 0x0C; 0xAD: 0x17; 0xAE: 0x0D; 0xAF: 0x0E; 0xC6: 0x02; 0xC7: 0x03; 0xC8: 0x04; 0xC9: 0x05; 0xCA: 0x06; 0xCB: 0x07; 0xCC: 0x08; 0xCD: 0x09; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x16; 0xAB: 0x0B; 0xAC: 0x0C; 0xAD: 0x17; 0xAE: 0x0D; 0xAF: 0x0E; 0xC6: 0x90; 0xC7: 0x91; 0xC8: 0x92; 0xC9: 0x93; 0xCA: 0x94; 0xCB: 0x95; 0xCC: 0x96; 0xCD: 0x97; 0x50: 0x88; 0x51: 0x89; 0x52: 0x8A; 0x53: 0x8B; 0x54: 0x8C; 0x55: 0x8D; 0x56: 0x8E; 0x57: 0x8F; } recolour_sprite { 0xAA: 0x16; 0xAB: 0x0B; 0xAC: 0x0C; 0xAD: 0x17; 0xAE: 0x0D; 0xAF: 0x0E; 0xC6: 0xB9; 0xC7: 0xBA; 0xC8: 0xBB; 0xC9: 0xBC; 0xCA: 0xBD; 0xCB: 0xBE; 0xCC: 0xBF; 0xCD: 0x34; 0x50: 0x92; 0x51: 0x93; 0x52: 0x94; 0x53: 0x95; 0x54: 0x96; 0x55: 0x97; 0x56: 0x98; 0x57: 0x99; } recolour_sprite { 0xAA: 0x16; 0xAB: 0x0B; 0xAC: 0x0C; 0xAD: 0x17; 0xAE: 0x0D; 0xAF: 0x0E; 0xC6: 0x20; 0xC7: 0x21; 0xC8: 0x22; 0xC9: 0x23; 0xCA: 0x24; 0xCB: 0x25; 0xCC: 0x26; 0xCD: 0x27; } recolour_sprite { 0xAA: 0x16; 0xAB: 0x0B; 0xAC: 0x0C; 0xAD: 0x17; 0xAE: 0x0D; 0xAF: 0x0E; 0xC6: 0x10; 0xC7: 0x11; 0xC8: 0x12; 0xC9: 0x13; 0xCA: 0x14; 0xCB: 0x15; 0xCC: 0x16; 0xCD: 0x17; } recolour_sprite { 0xAA: 0x16; 0xAB: 0x0B; 0xAC: 0x0C; 0xAD: 0x17; 0xAE: 0x0D; 0xAF: 0x0E; 0xC6: 0x07; 0xC7: 0x08; 0xC8: 0x09; 0xC9: 0x0A; 0xCA: 0x0B; 0xCB: 0x0C; 0xCC: 0x0D; 0xCD: 0x0E; 0x50: 0xB9; 0x51: 0xBA; 0x52: 0xBB; 0x53: 0xBC; 0x54: 0xBD; 0x55: 0xBE; 0x56: 0xBF; 0x57: 0x34; }
    }
# 283 "src/palettes.pnml"
switch(FEAT_TRAINS, SELF, switch_bulk_company_colour1_recolour, cargo_type_in_veh) { COAL: return palette_cargo_cc + 0*16 + company_colour1; GRAI: return palette_cargo_cc + 1*16 + company_colour1; WHEA: return palette_cargo_cc + 1*16 + company_colour1; MAIZ: return palette_cargo_cc + 1*16 + company_colour1; IORE: return palette_cargo_cc + 2*16 + company_colour1; CORE: return palette_cargo_cc + 3*16 + company_colour1; AORE: return palette_cargo_cc + 4*16 + company_colour1; CLAY: return palette_cargo_cc + 5*16 + company_colour1; FERT: return palette_cargo_cc + 5*16 + company_colour1; GRVL: return palette_cargo_cc + 6*16 + company_colour1; LIME: return palette_cargo_cc + 7*16 + company_colour1; OLSD: return palette_cargo_cc + 8*16 + company_colour1; POTA: return palette_cargo_cc + 7*16 + company_colour1; SAND: return palette_cargo_cc + 9*16 + company_colour1; SCMT: return palette_cargo_cc + 10*16 + company_colour1; SGBT: return palette_cargo_cc + 11*16 + company_colour1; SGCN: return palette_cargo_cc + 10*16 + company_colour1; SULP: return palette_cargo_cc + 12*16 + company_colour1; MNO2: return palette_cargo_cc + 14*16 + company_colour1; COKE: return palette_cargo_cc + 15*16 + company_colour1; SLAG: return palette_cargo_cc + 16*16 + company_colour1; NITR: return palette_cargo_cc + 17*16 + company_colour1; PHOS: return palette_cargo_cc + 17*16 + company_colour1; SASH: return palette_cargo_cc + 7*16 + company_colour1; CMNT: return palette_cargo_cc + 6*16 + company_colour1; PORE: return palette_cargo_cc + 3*16 + company_colour1; return palette_cargo_cc + 13*16 + company_colour1; }
switch(FEAT_TRAINS, SELF, switch_bulk_7_recolour, cargo_type_in_veh) { COAL: return palette_cargo_cc + 0*16 + company_colour1; GRAI: return palette_cargo_cc + 1*16 + company_colour1; WHEA: return palette_cargo_cc + 1*16 + company_colour1; MAIZ: return palette_cargo_cc + 1*16 + company_colour1; IORE: return palette_cargo_cc + 2*16 + company_colour1; CORE: return palette_cargo_cc + 3*16 + company_colour1; AORE: return palette_cargo_cc + 4*16 + company_colour1; CLAY: return palette_cargo_cc + 5*16 + company_colour1; FERT: return palette_cargo_cc + 5*16 + company_colour1; GRVL: return palette_cargo_cc + 6*16 + company_colour1; LIME: return palette_cargo_cc + 7*16 + company_colour1; OLSD: return palette_cargo_cc + 8*16 + company_colour1; POTA: return palette_cargo_cc + 7*16 + company_colour1; SAND: return palette_cargo_cc + 9*16 + company_colour1; SCMT: return palette_cargo_cc + 10*16 + company_colour1; SGBT: return palette_cargo_cc + 11*16 + company_colour1; SGCN: return palette_cargo_cc + 10*16 + company_colour1; SULP: return palette_cargo_cc + 12*16 + company_colour1; MNO2: return palette_cargo_cc + 14*16 + company_colour1; COKE: return palette_cargo_cc + 15*16 + company_colour1; SLAG: return palette_cargo_cc + 16*16 + company_colour1; NITR: return palette_cargo_cc + 17*16 + company_colour1; PHOS: return palette_cargo_cc + 17*16 + company_colour1; SASH: return palette_cargo_cc + 7*16 + company_colour1; CMNT: return palette_cargo_cc + 6*16 + company_colour1; PORE: return palette_cargo_cc + 3*16 + company_colour1; return palette_cargo_cc + 13*16 + 7; }
switch(FEAT_TRAINS, SELF, switch_bulk_14_recolour, cargo_type_in_veh) { COAL: return palette_cargo_cc + 0*16 + company_colour1; GRAI: return palette_cargo_cc + 1*16 + company_colour1; WHEA: return palette_cargo_cc + 1*16 + company_colour1; MAIZ: return palette_cargo_cc + 1*16 + company_colour1; IORE: return palette_cargo_cc + 2*16 + company_colour1; CORE: return palette_cargo_cc + 3*16 + company_colour1; AORE: return palette_cargo_cc + 4*16 + company_colour1; CLAY: return palette_cargo_cc + 5*16 + company_colour1; FERT: return palette_cargo_cc + 5*16 + company_colour1; GRVL: return palette_cargo_cc + 6*16 + company_colour1; LIME: return palette_cargo_cc + 7*16 + company_colour1; OLSD: return palette_cargo_cc + 8*16 + company_colour1; POTA: return palette_cargo_cc + 7*16 + company_colour1; SAND: return palette_cargo_cc + 9*16 + company_colour1; SCMT: return palette_cargo_cc + 10*16 + company_colour1; SGBT: return palette_cargo_cc + 11*16 + company_colour1; SGCN: return palette_cargo_cc + 10*16 + company_colour1; SULP: return palette_cargo_cc + 12*16 + company_colour1; MNO2: return palette_cargo_cc + 14*16 + company_colour1; COKE: return palette_cargo_cc + 15*16 + company_colour1; SLAG: return palette_cargo_cc + 16*16 + company_colour1; NITR: return palette_cargo_cc + 17*16 + company_colour1; PHOS: return palette_cargo_cc + 17*16 + company_colour1; SASH: return palette_cargo_cc + 7*16 + company_colour1; CMNT: return palette_cargo_cc + 6*16 + company_colour1; PORE: return palette_cargo_cc + 3*16 + company_colour1; return palette_cargo_cc + 13*16 + 14; }


switch(FEAT_TRAINS, SELF, switch_brown_recolour, cargo_type_in_veh) {
 return palette_cargo_cc + 13*16 + 7; //KHAKI1ccBROWN2cc
}

switch(FEAT_TRAINS, SELF, switch_green_recolour, cargo_type_in_veh) {
 return palette_cargo_cc + 13*16 + 14; //GRAY1ccGREEN2cc
}

switch(FEAT_TRAINS, SELF, switch_1cc_recolour, cargo_type_in_veh) {
 return palette_cargo_cc + 13*16 + company_colour1;
}

palette_olive_red = reserve_sprites(1);
replace(palette_olive_red) { recolour_sprite {
0xC6: 0x58; 0xC7: 0x59; 0xC8: 0x5A; 0xC9: 0x5B; 0xCA: 0x5C; 0xCB: 0x5D; 0xCC: 0x5E; 0xCD: 0x5F; 0x50: 0x46; 0x51: 0xB2; 0x52: 0xB3; 0x53: 0xB4; 0x54: 0xB5; 0x55: 0xB6; 0x56: 0xA2; 0x57: 0xA3;
        } }

palette_black_red = reserve_sprites(1);
replace(palette_black_red) { recolour_sprite {
0xC6: 0xD6; 0xC7: 0xD7; 0xC8: 0x88; 0xC9: 0x6A; 0xCA: 0x58; 0xCB: 0x10; 0xCC: 0x11; 0xCD: 0x12; 0x50: 0x46; 0x51: 0xB2; 0x52: 0xB3; 0x53: 0xB4; 0x54: 0xB5; 0x55: 0xB6; 0x56: 0xA2; 0x57: 0xA3;
        } }

switch (FEAT_TRAINS, SELF, switch_livery_subtype_car, cargo_subtype)
{
  0: return switch_1cc_recolour;
  1: return switch_brown_recolour; //KHAKI1ccBROWN2cc
  2: return switch_green_recolour; //GRAY1ccGREEN2cc
     return CB_FAILED;
}

switch (FEAT_TRAINS, SELF, switch_livery_subtype_mapping_cargo, cargo_subtype)
{
  0: return switch_bulk_company_colour1_recolour;
  1: return switch_bulk_7_recolour; //KHAKI1ccBROWN2cc
  2: return switch_bulk_14_recolour; //GRAY1ccGREEN2cc
     return CB_FAILED;
}

switch (FEAT_TRAINS, SELF, switch_livery_subtype_loco, cargo_subtype)
{
  0: return palette_olive_red;
  1: return palette_black_red;
  2: return switch_1cc_recolour;
     return CB_FAILED;
}

switch (FEAT_TRAINS, SELF, switch_car_livery_subtype_text, cargo_subtype)
{
  0: return string(STR_LIVERY_Q2CC);
  1: return string(STR_LIVERY_BROWN);
  2: return string(STR_LIVERY_GREEN);
     return CB_RESULT_NO_TEXT;
}

switch (FEAT_TRAINS, SELF, switch_loco_livery_subtype_text, cargo_subtype)
{
  0: return string(STR_LIVERY_OLIVE);
  1: return string(STR_LIVERY_BLACK);
  2: return string(STR_LIVERY_Q2CC);
     return CB_RESULT_NO_TEXT;
}
# 19 "NG600mm.pnml" 2

# 1 "src/railsprite.pnml" 1
 // railsprite templates


// icons templates

template rail_gui_template(x, y)
{
  // icons
  [ x, y, 20, 20, 0, 0]
  [ x+32, y, 20, 20, 0, 0]
  [ x+64, y, 20, 20, 0, 0]
  [ x+96, y, 20, 20, 0, 0]
  [x+128, y, 20, 20, 0, 0]
  [x+334, y, 20, 20, 0, 0]
  [x+382, y, 20, 20, 0, 0]
  [x+430, y, 20, 20, 0, 0]

  // cursors
  [ x, y+42, 38, 30, -4, -14]
  [ x+48, y+42, 72, 44, -16, -8]
  [x+128, y+42, 44, 34, -21, -2]
  [x+180, y+42, 72, 44, -16, -35]
  [x+260, y+42, 56, 36, 0, 0]
  [x+324, y+42, 32, 32, 0, 0]
  [x+372, y+42, 32, 32, 0, 0]
  [x+420, y+42, 32, 32, 0, 0]
}

template rail_track_overlay_template(x, y)
{
  [ x, y, 64, 31, -31, 0]
  [ x+80, y, 64, 31, -31, 0]
  [x+160, y, 64, 16, -31, 0]
  [x+240, y, 64, 16, -31, 15]
  [x+320, y, 32, 31, 1, 0]
  [x+368, y, 32, 31, -31, 0]
  [x+416, y, 64, 39, -31, -8]
  [x+496, y, 64, 23, -31, 0]
  [x+576, y, 64, 23, -31, 0]
  [x+656, y, 64, 39, -31, -8]
}

template rail_underlay_template(x, y)
{
  [ x, y, 64, 31, -31, 0]
  [ x+80, y, 64, 31, -31, 0]
  [x+160, y, 64, 16, -31, 0]
  [x+240, y, 64, 16, -31, 15]
  [x+320, y, 32, 31, 1, 0]
  [x+368, y, 32, 31, -31, 0]
  [x+416, y, 64, 39, -31, -8]
  [x+496, y, 64, 23, -31, 0]
  [x+576, y, 64, 23, -31, 0]
  [x+656, y, 64, 39, -31, -8]
  [x+736, y, 64, 31, -31, 0]

  [x+160, y+164, 64, 31, -31, 0]
  [x+240, y+164, 64, 31, -31, 0]
  [x+320, y+164, 64, 31, -31, 0]
  [x+400, y+164, 64, 31, -31, 0]
  [x+480, y+164, 64, 31, -31, 0]
}

template rail_tunnels_template(x, y)
{
  [ x, y, 64, 31, -31, 1]
  [ x+80, y, 64, 31, -31, 1]
  [x+160, y, 64, 31, -31, 1]
  [x+240, y, 64, 31, -31, 1]
}

template rail_bridge_surfaces_template(x, y)
{
  [ x, y, 64, 32, -31, 0]
  [ x+80, y, 64, 32, -31, 0]

  [x+416, y, 64, 39, -31, -8]
  [x+496, y, 64, 23, -31, 0]
  [x+576, y, 64, 23, -31, 0]
  [x+656, y, 64, 39, -31, -8]
}

template rail_depot_template(x, y)
{
  [ x+40, y+61, 24, 25, 9, -2]
  [ x, y, 64, 53, -9, -37]
  [ x+80, y+61, 24, 25, -31, -2]
  [ x+80, y, 64, 53, -53, -37]
  [x+240, y, 64, 53, -53, -37]
  [x+160, y, 64, 53, -9, -37]
}

template rail_depot_snow_template(x, y)
{
  [ x+40, y+61, 24, 25, 9, -2]
  [ x, y, 64, 53, -9, -37]
  [ x+80, y+61, 24, 25, -31, -2]
  [ x+80, y, 64, 53, -53, -37]
  [x+240, y, 64, 53, -53, -37]
  [x+160, y, 64, 53, -9, -37]
}

template level_crossings_railway_template(x, y, filename)
{
  [ x, y, 64, 31, -31, 0, filename]
  [ x+80, y, 64, 31, -31, 0, filename]
}

// A open level crossing with warning lights and signs

template level_crossings_1_template(x, y, filename)
{
  [ x, y, 7, 13, 0, 0, filename]
  [ x+50, y, 7, 13, -3, -9, filename]
  [x+100, y, 7, 13, -6, -10, filename]
  [x+150, y, 7, 13, 0, 0, filename]
  [x+200, y, 7, 13, -1, -9, filename]
  [x+250, y, 7, 13, 0, 0, filename]
  [x+300, y, 7, 13, 0, 0, filename]
  [x+350, y, 7, 13, -2, -11, filename]
}

// A half barrier level crossing

template level_crossings_2_open_template(x, y, filename)
{
  [ x, y, 7, 20, 0, 0, filename]
  [ x+48, y, 9, 20, -9, -13, filename]
  [x+100, y, 9, 20, -8, -18, filename]
  [x+150, y, 7, 20, 0, 0, filename]
  [x+198, y, 9, 20, 1, -14, filename]
  [x+250, y, 7, 20, 0, 0, filename]
  [x+300, y, 7, 20, 0, 0, filename]
  [x+350, y, 9, 20, 2, -19, filename]
}

template level_crossings_2_closed_template(x, y, filename)
{
  [ x, y, 7, 20, 0, 0, filename]
  [ x+48, y, 22, 25, -9, -13, filename]
  [ x+87, y, 22, 25, -21, -18, filename]
  [x+150, y, 7, 20, 0, 0, filename]
  [x+198, y, 22, 20, 1, -14, filename]
  [x+250, y, 7, 20, 0, 0, filename]
  [x+300, y, 7, 20, 0, 0, filename]
  [x+337, y, 22, 20, -11, -19, filename]
}

template pylons_template(x, y, z)
{
   [z*x, z*y, 12*z, 28*z, -9*z, -25*z]
  [z*(x+32), z*y, 12*z, 30*z, 0, -28*z]
  [z*(x+64), z*y, 12*z, 30*z, -1*z, -25*z]
  [z*(x+96), z*y, 12*z, 30*z, -9*z, -27*z]
  [z*(x+115), z*y, 6*z, 28*z, -2*z, -26*z]
  [z*(x+131), z*y, 6*z, 30*z, -2*z, -27*z]
  [z*(x+147), z*y, 14*z, 28*z, -3*z, -26*z]
  [z*(x+179), z*y, 14*z, 28*z, -10*z, -26*z]
}

//real sprites:
//ng600



spriteset(ng600_gui, "src/graphics/ng600.png")
{
  rail_gui_template(2, 22)
}

spriteset(ng600_track_overlay, "src/graphics/ng600.png")
{
  rail_track_overlay_template(2, 131)
}

spriteset(ng600_underlay, "src/graphics/ng600.png")
{
  rail_underlay_template(2, 185)
}

spriteset(ng600_tunnels, "src/graphics/ng600.png")
{
  rail_tunnels_template(2, 291)
}

spriteset(ng600_bridge_surfaces, "src/graphics/ng600.png")
{
  rail_bridge_surfaces_template(2, 239)
}




// depot



spriteset(ng600_depot, "src/graphics/ng60_depot.png")
{
  rail_depot_template(2, 24)
}

spriteset(ng600_depot_snow, "src/graphics/ng60_depot.png")
{
  rail_depot_snow_template(2, 232)
}






spriteset(ng600_level_crossings_open)
{
  level_crossings_railway_template(2, 349, "src/graphics/ng600.png")
  level_crossings_1_template(10, 133, "src/graphics/crossing1.png")
}


spriteset(ng600rail_level_crossings_open)
{
  level_crossings_railway_template(2, 349, "src/graphics/ng600rail.png")
  level_crossings_1_template(10, 133, "src/graphics/crossing1.png")
}



// fences



spriteset(no_fence, "src/graphics/fences.png")
{
  pylons_template(5, 191, 1)
}



//double gauge


spriteset(ng600rail_gui, "src/graphics/ng600rail.png")
{
  rail_gui_template(2, 22)
}

spriteset(ng600rail_track_overlay, "src/graphics/ng600rail.png")
{
  rail_track_overlay_template(2, 131)
}

spriteset(ng600rail_underlay, "src/graphics/ng600rail.png")
{
  rail_underlay_template(2, 185)
}

spriteset(ng600rail_tunnels, "src/graphics/ng600rail.png")
{
  rail_tunnels_template(2, 291)
}

spriteset(ng600rail_bridge_surfaces, "src/graphics/ng600rail.png")
{
  rail_bridge_surfaces_template(2, 239)
}





spriteset(ng600e_gui, "src/graphics/ng600e.png")
{
  rail_gui_template(2, 22)
}

spriteset(ng600e_track_overlay, "src/graphics/ng600e.png")
{
  rail_track_overlay_template(2, 131)
}

spriteset(ng600e_underlay, "src/graphics/ng600e.png")
{
  rail_underlay_template(2, 185)
}
# 21 "NG600mm.pnml" 2
# 1 "src/railtrack.pnml" 1
 // railtracks

switch (FEAT_RAILTYPES, SELF, get_ng600_depots,
  terrain_type )
{
  TILETYPE_SNOW: ng600_depot_snow;
  ng600_depot;
}


if (railtype_available("NG60") || (loading_stage == LOADING_STAGE_RESERVE)) {
  item (FEAT_RAILTYPES, NG600)
  {
    property
    {
      label: "NG60";
      introduction_date: date(1783, 1, 1);
      name: string(STR_NG60_NAME);
      toolbar_caption: string(STR_NG60_TOOLBAR);
      menu_text: string(STR_NG60_MENU);
      build_window_caption: string(STR_NG60_BUILD_CAPTION);
      autoreplace_text: string(STR_NG60_AUTOREPLACE);
      new_engine_text: string(STR_NG60_NEW_ENGINE);
      compatible_railtype_list: ["NG6R", "NG6E"];
      powered_railtype_list: ["NG60", "NG6R", "NG6E"];
      curve_speed_multiplier: 100;
      station_graphics: RAILTYPE_STATION_NORMAL;
      construction_cost: 1 + 2 * param_build_cost;
      maintenance_cost: 1 + 2 * param_infra_cost;
      speed_limit: 40 km/h;
      acceleration_model: ACC_MODEL_RAIL;
      map_colour: 16;
      sort_order: 252;
//      alternative_railtype_list: ["NAAN"];
      railtype_flags: bitmask();
    }
    graphics
    {
      gui: ng600_gui;
      track_overlay: ng600_track_overlay;
      underlay:ng600_underlay;
      tunnels: ng600_tunnels;
//      tunnel_overlay: ng600_tunnels;
      fences: no_fence;
      bridge_surfaces: ng600_bridge_surfaces;
      level_crossings: ng600_level_crossings_open;
      depots: get_ng600_depots;
//      signals: switch_signals_type;
    }
  }
}

//dual gauge 600/1435mm
if (railtype_available("NG6R") || (loading_stage == LOADING_STAGE_RESERVE)) {
  item (FEAT_RAILTYPES, NG600RAIL)
  {
    property
    {
      label: "NG6R";
      introduction_date: date(1883, 1, 1);
      name: string(STR_NG6R_NAME);
      toolbar_caption: string(STR_NG6R_TOOLBAR);
      menu_text: string(STR_NG6R_MENU);
      build_window_caption: string(STR_NG6R_BUILD_CAPTION);
      autoreplace_text: string(STR_NG60_AUTOREPLACE);
      new_engine_text: string(STR_NG60_NEW_ENGINE);
      compatible_railtype_list: ["NG60", "NAAN", "RAIL", "ELRL"];
      powered_railtype_list: ["NG6R", "NG60", "NAAN", "RAIL"];
      curve_speed_multiplier: 100;
      station_graphics: RAILTYPE_STATION_NORMAL;
      construction_cost: 5 + 4 * param_build_cost;
      maintenance_cost: 5 + 4 * param_infra_cost;
      speed_limit: 60 km/h;
      acceleration_model: ACC_MODEL_RAIL;
      map_colour: 17;
      sort_order: 253;
//      alternative_railtype_list: ["NAAN"];
      railtype_flags: bitmask();
    }
    graphics
    {
      gui: ng600rail_gui;
      track_overlay: ng600rail_track_overlay;
      underlay:ng600rail_underlay;
      tunnels: ng600rail_tunnels;
//      tunnel_overlay: ng600_tunnels; 
      bridge_surfaces: ng600rail_bridge_surfaces;
      level_crossings: ng600rail_level_crossings_open;
//      signals: switch_signals_type;
    }
  }
}

if (param_enable_electric) {
if (railtype_available("NG6E") || (loading_stage == LOADING_STAGE_RESERVE)) {
  item (FEAT_RAILTYPES, NG600E)
  {
    property
    {
      label: "NG6E";
      introduction_date: date(1951, 1, 1);
      name: string(STR_NG6E_NAME);
      toolbar_caption: string(STR_NG6E_TOOLBAR);
      menu_text: string(STR_NG6E_MENU);
      build_window_caption: string(STR_NG6E_BUILD_CAPTION);
      autoreplace_text: string(STR_NG6E_AUTOREPLACE);
      new_engine_text: string(STR_NG6E_NEW_ENGINE);
      compatible_railtype_list: ["NG60", "NAAN", "NAAE"];
      powered_railtype_list: ["NG6E", "NAAE"];
      curve_speed_multiplier: 100;
      station_graphics: RAILTYPE_STATION_NORMAL;
      construction_cost: 7 + 4 * param_build_cost;
      maintenance_cost: 8 + 4 * param_infra_cost;
      speed_limit: 40 km/h;
      acceleration_model: ACC_MODEL_RAIL;
      map_colour: 19;
      sort_order: 254;
//      alternative_railtype_list: ["NAAE"];
      railtype_flags: bitmask(RAILTYPE_FLAG_CATENARY);
    }
    graphics
    {
      gui: ng600e_gui;
      track_overlay: ng600e_track_overlay;
      underlay:ng600e_underlay;
      tunnels: ng600_tunnels;
//      tunnel_overlay: ng600_tunnels; 
      bridge_surfaces: ng600_bridge_surfaces;
      level_crossings: ng600_level_crossings_open;
//      signals: switch_signals_type;
    }
  }
}
}

item (FEAT_RAILTYPES, rt_rail) {
 property {
  label : "RAIL";
  compatible_railtype_list : ["NG6R", "ELRL"];
                powered_railtype_list: ["NG6R", "RAIL", "ELRL"];
 }
}

item (FEAT_RAILTYPES, rt_elrl) {

 property {
  label : "ELRL";
  compatible_railtype_list : ["NG6R", "RAIL"];
                powered_railtype_list: ["ELRL"];
 }
}
# 22 "NG600mm.pnml" 2

/* locomotives */
# 1 "src/horses.pnml" 1


// one horse 

spriteset(spriteset_onehorse_purchase, "src/graphics/horse4bgait_harness.png") { template_sprite_window_sideview7(8) }
# 25 "src/horses.pnml"
spriteset(onehorse_walkstop_graphic, "src/graphics/horse4bgait_harness.png") { template_spriteh(8) } spriteset(onehorse_walk0_graphic, "src/graphics/horse4bgait_harness.png") { template_spriteh(38) } spriteset(onehorse_walk1_graphic, "src/graphics/horse4bgait_harness.png") { template_spriteh(68) } spriteset(onehorse_walk2_graphic, "src/graphics/horse4bgait_harness.png") { template_spriteh(98) } spriteset(onehorse_walk3_graphic, "src/graphics/horse4bgait_harness.png") { template_spriteh(128) } switch(FEAT_TRAINS, SELF, animated_onehorse_switch, motion_counter % 4) { 0 : return onehorse_walk0_graphic; 1 : return onehorse_walk1_graphic; 2 : return onehorse_walk2_graphic; 3 : return onehorse_walk3_graphic; return CB_FAILED; } switch(FEAT_TRAINS, SELF, velocity_onehorse_switch, current_speed) { 0 : return onehorse_walkstop_graphic; return animated_onehorse_switch; }

switch (FEAT_TRAINS, SELF, switch_onehorse_start_stop, (count_veh_id(OneHorse)>1) ) {
 0: return CB_RESULT_NO_TEXT;
 return string(STR_SINGLE_HORSE);
}

switch(FEAT_TRAINS, SELF, horse_sound_switch, (extra_callback_info1 & 0xFF)) {
SOUND_EVENT_BREAKDOWN : return SOUND_HORSE;
return CB_RESULT_NO_SOUND;
}

item(FEAT_TRAINS, OneHorse) {
 property {
 name: string(STR_1_HORSE);
 climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL);
 introduction_date: date(1700, 1, 1);
 model_life: VEHICLE_NEVER_EXPIRES;
 vehicle_life: 25;
 retire_early: 0;
 reliability_decay: 10;
 loading_speed: 5;
 cost_factor: 5;
 refit_cost: 0;
 running_cost_factor: 10;
 sprite_id: SPRITE_ID_NEW_TRAIN;
 speed: 15 km/h;
 misc_flags: bitmask(TRAIN_FLAG_2CC,ROADVEH_FLAG_NO_BREAKDOWN_SMOKE);
 cargo_age_period: 285;
 cargo_capacity: 0;
 power: 10 hp;
 tractive_effort_coefficient: 1;
 air_drag_coefficient: 0.9;
 running_cost_base: RUNNING_COST_ELECTRIC;
        track_type: NG60;
        ai_engine_rank: 0;
        engine_class: ENGINE_CLASS_STEAM;
 weight: 1;
 length: 5;
        extra_weight_per_wagon: 0;
 visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
        bitmask_vehicle_info: 0;
    }

    graphics {
 default: velocity_onehorse_switch;
 purchase: spriteset_onehorse_purchase;
 sound_effect: horse_sound_switch;
        start_stop: switch_onehorse_start_stop;
    }
}


spriteset(spriteset_twohorses_purchase, "src/graphics/2horse_walk.png") { template_sprite_window_sideview6(8) }

spriteset(twohorse_walkstop_graphic, "src/graphics/2horse_walk.png") { template_sprite6(8) }
spriteset(twohorse_walk0_graphic, "src/graphics/2horse_walk.png") { template_sprite6(33) }
spriteset(twohorse_walk1_graphic, "src/graphics/2horse_walk.png") { template_sprite6(58) }
spriteset(twohorse_walk2_graphic, "src/graphics/2horse_walk.png") { template_sprite6(83) }
spriteset(twohorse_walk3_graphic, "src/graphics/2horse_walk.png") { template_sprite6(108) }

spriteset(twohorse_rc_walkstop_graphic, "src/graphics/2horse_walk_rc.png") { template_sprite6(8) }
spriteset(twohorse_rc_walk0_graphic, "src/graphics/2horse_walk_rc.png") { template_sprite6(33) }
spriteset(twohorse_rc_walk1_graphic, "src/graphics/2horse_walk_rc.png") { template_sprite6(58) }
spriteset(twohorse_rc_walk2_graphic, "src/graphics/2horse_walk_rc.png") { template_sprite6(83) }
spriteset(twohorse_rc_walk3_graphic, "src/graphics/2horse_walk_rc.png") { template_sprite6(108) }

spriteset(twohorse_rb_walkstop_graphic, "src/graphics/2horse_walk_rb.png") { template_sprite6(8) }
spriteset(twohorse_rb_walk0_graphic, "src/graphics/2horse_walk_rb.png") { template_sprite6(33) }
spriteset(twohorse_rb_walk1_graphic, "src/graphics/2horse_walk_rb.png") { template_sprite6(58) }
spriteset(twohorse_rb_walk2_graphic, "src/graphics/2horse_walk_rb.png") { template_sprite6(83) }
spriteset(twohorse_rb_walk3_graphic, "src/graphics/2horse_walk_rb.png") { template_sprite6(108) }

switch(FEAT_TRAINS, SELF, animated_horsewalk_graphic_switch, motion_counter % 4) {
0 : return twohorse_walk0_graphic;
1 : return twohorse_walk1_graphic;
2 : return twohorse_walk2_graphic;
3 : return twohorse_walk3_graphic;
return CB_FAILED;
}
switch(FEAT_TRAINS, SELF, velocity_horsewalk_graphic_switch, current_speed) {
0..1 : return twohorse_walkstop_graphic;
return animated_horsewalk_graphic_switch;
}

switch(FEAT_TRAINS, SELF, animated_horsewalk_rc_graphic_switch, motion_counter % 4) {
0 : return twohorse_rc_walk0_graphic;
1 : return twohorse_rc_walk1_graphic;
2 : return twohorse_rc_walk2_graphic;
3 : return twohorse_rc_walk3_graphic;
return CB_FAILED;
}
switch(FEAT_TRAINS, SELF, velocity_horsewalk_rc_graphic_switch, current_speed) {
0..1 : return twohorse_rc_walkstop_graphic;
return animated_horsewalk_rc_graphic_switch;
}

switch(FEAT_TRAINS, SELF, animated_horsewalk_rb_graphic_switch, motion_counter % 4) {
0 : return twohorse_rb_walk0_graphic;
1 : return twohorse_rb_walk1_graphic;
2 : return twohorse_rb_walk2_graphic;
3 : return twohorse_rb_walk3_graphic;
return CB_FAILED;
}
switch(FEAT_TRAINS, SELF, velocity_horsewalk_rb_graphic_switch, current_speed) {
0..1 : return twohorse_rb_walkstop_graphic;
return animated_horsewalk_rb_graphic_switch;
}

random_switch(FEAT_TRAINS, SELF, switch_randomize_horsepair_graphics) {
    3: return velocity_horsewalk_rb_graphic_switch;
    2: return velocity_horsewalk_rc_graphic_switch;
    1: return velocity_horsewalk_graphic_switch;
}


item(FEAT_TRAINS, TwoHorses) {
 property {
 name: string(STR_2_HORSE);
 climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL);
 introduction_date: date(1700, 1, 1);
 model_life: 255;
 vehicle_life: 20;
 retire_early: 0;
 reliability_decay: 5;
 loading_speed: 5;
 cost_factor: 10;
 refit_cost: 0;
 running_cost_factor: 2 * 10;
 sprite_id: SPRITE_ID_NEW_TRAIN;
 speed: 8 km/h;
 misc_flags: bitmask(TRAIN_FLAG_2CC,ROADVEH_FLAG_NO_BREAKDOWN_SMOKE);
 cargo_age_period: 285;
 cargo_capacity: 0;
 power: 20 hp;
 tractive_effort_coefficient: 1;
 air_drag_coefficient: 0.9;
 running_cost_base: RUNNING_COST_ELECTRIC;
        track_type: NG60;
        ai_engine_rank: 0;
        engine_class: ENGINE_CLASS_STEAM;
 weight: 1;
 length: 5;
        extra_weight_per_wagon: 0;
 visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
        bitmask_vehicle_info: 0;
    }

    graphics {
 default: switch_randomize_horsepair_graphics;
 purchase: spriteset_twohorses_purchase;
 sound_effect: horse_sound_switch;
    }
}
# 25 "NG600mm.pnml" 2
# 1 "src/def_steam.pnml" 1
//Steam locomotives
# 48 "src/def_steam.pnml"
//DIESEL_LOCO(Loco_Name, STR_L_NAME, idate, odate, retire, v_life, v_reliab, v_cost,  v_vmax, v_power, v_te, v_airdrag, v_mass, v_length)


# 1 "src/graphics/MaffeiB.pnml" 1


spriteset(spriteset_MaffeiB_purchase, "src/graphics/industrial_tram_locomotives.png")
{ tmpl_sprite_purchase5(240) }

spriteset(spriteset_MaffeiB_graphic, "src/graphics/industrial_tram_locomotives.png") { tmpl_sprite_train_block5(240) }
# 52 "src/def_steam.pnml" 2
item(FEAT_TRAINS, MaffeiB) { property { name: string(STR_MM_B, string(STR_STEAM_LOCO_SUFFIX)); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1860, 1, 1); model_life: param_keep_old_vehs == 0 ? (1925 == 0 ? VEHICLE_NEVER_EXPIRES : 1925 -1860 +10 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 30; retire_early: 10; reliability_decay: 20; loading_speed: 5; cost_factor: 30; running_cost_factor: min(1 + 2 * 10 + (((9) * ((45 * 40) + 80 + (15) * (15)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 15 km/h; misc_flags: bitmask(); cargo_age_period: 285; power: 45 hp; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; cargo_capacity: 1; cargo_allow_refit: [PASS]; default_cargo_type: PASS; weight: 9; tractive_effort_coefficient: 0.5; air_drag_coefficient: 0.8; length: 5; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DEFAULT, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_MaffeiB_graphic; purchase: spriteset_MaffeiB_purchase; cargo_subtype_text: switch_loco_livery_subtype_text; colour_mapping: switch_livery_subtype_loco; purchase_cargo_capacity: return 0; cargo_capacity: return 0; can_attach_wagon: switch_can_attach; } }


# 1 "src/graphics/DorstfeldBt.pnml" 1


spriteset(spriteset_DorstfeldBt_purchase, "src/graphics/industrial_tram_locomotives.png")
{ tmpl_sprite_purchase3(120) }

spriteset(spriteset_DorstfeldBt_graphic, "src/graphics/industrial_tram_locomotives.png") { tmpl_sprite_train_block3(140) }
# 56 "src/def_steam.pnml" 2
item(FEAT_TRAINS, DorstfeldBt) { property { name: string(STR_OAK_BT, string(STR_STEAM_LOCO_SUFFIX)); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1882, 1, 1); model_life: param_keep_old_vehs == 0 ? (1935 == 0 ? VEHICLE_NEVER_EXPIRES : 1935 -1882 +20 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 40; retire_early: 20; reliability_decay: 25; loading_speed: 5; cost_factor: 26; running_cost_factor: min(1 + 2 * 10 + (((7) * ((20 * 40) + 80 + (20) * (20)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 20 km/h; misc_flags: bitmask(); cargo_age_period: 285; power: 20 hp; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; cargo_capacity: 1; cargo_allow_refit: [PASS]; default_cargo_type: PASS; weight: 7; tractive_effort_coefficient: 1; air_drag_coefficient: 0.7; length: 3; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DEFAULT, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_DorstfeldBt_graphic; purchase: spriteset_DorstfeldBt_purchase; cargo_subtype_text: switch_loco_livery_subtype_text; colour_mapping: switch_livery_subtype_loco; purchase_cargo_capacity: return 0; cargo_capacity: return 0; can_attach_wagon: switch_can_attach; } }


# 1 "src/graphics/ChemnitzCt.pnml" 1


spriteset(spriteset_ChemnitzCt_purchase, "src/graphics/industrial_tram_locomotives.png")
{ tmpl_sprite_purchase4(180) }

spriteset(spriteset_ChemnitzCt_graphic, "src/graphics/industrial_tram_locomotives.png") { tmpl_sprite_train_block4(180) }
# 60 "src/def_steam.pnml" 2
item(FEAT_TRAINS, ChemnitzCt) { property { name: string(STR_SM_CT, string(STR_STEAM_LOCO_SUFFIX)); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1904, 1, 1); model_life: param_keep_old_vehs == 0 ? (1945 == 0 ? VEHICLE_NEVER_EXPIRES : 1945 -1904 +20 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 40; retire_early: 20; reliability_decay: 20; loading_speed: 5; cost_factor: 40; running_cost_factor: min(1 + 2 * 10 + (((12) * ((70 * 40) + 80 + (20) * (20)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 20 km/h; misc_flags: bitmask(); cargo_age_period: 285; power: 70 hp; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; cargo_capacity: 1; cargo_allow_refit: [PASS]; default_cargo_type: PASS; weight: 12; tractive_effort_coefficient: 0.9; air_drag_coefficient: 0.6; length: 4; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DEFAULT, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_ChemnitzCt_graphic; purchase: spriteset_ChemnitzCt_purchase; cargo_subtype_text: switch_loco_livery_subtype_text; colour_mapping: switch_livery_subtype_loco; purchase_cargo_capacity: return 0; cargo_capacity: return 0; can_attach_wagon: switch_can_attach; } }


# 1 "src/graphics/KasselDt.pnml" 1


spriteset(spriteset_KasselDt_purchase, "src/graphics/industrial_tram_locomotives.png")
{ tmpl_sprite_purchase5(220) }

spriteset(spriteset_KasselDt_graphic, "src/graphics/industrial_tram_locomotives.png") { tmpl_sprite_train_block5(220) }
# 64 "src/def_steam.pnml" 2
item(FEAT_TRAINS, KasselDt) { property { name: string(STR_HK_DT, string(STR_STEAM_LOCO_SUFFIX)); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1926, 1, 1); model_life: param_keep_old_vehs == 0 ? (1955 == 0 ? VEHICLE_NEVER_EXPIRES : 1955 -1926 +20 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 40; retire_early: 20; reliability_decay: 15; loading_speed: 5; cost_factor: 56; running_cost_factor: min(1 + 2 * 10 + (((20) * ((110 * 40) + 80 + (30) * (30)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 30 km/h; misc_flags: bitmask(); cargo_age_period: 285; power: 110 hp; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; cargo_capacity: 1; cargo_allow_refit: [PASS]; default_cargo_type: PASS; weight: 20; tractive_effort_coefficient: 0.9; air_drag_coefficient: 0.6; length: 5; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DEFAULT, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_KasselDt_graphic; purchase: spriteset_KasselDt_purchase; cargo_subtype_text: switch_loco_livery_subtype_text; colour_mapping: switch_livery_subtype_loco; purchase_cargo_capacity: return 0; cargo_capacity: return 0; can_attach_wagon: switch_can_attach; } }


# 1 "src/graphics/RiesaBt.pnml" 1


spriteset(spriteset_RiesaBt_purchase, "src/graphics/industrial_tram_locomotives.png")
{ tmpl_sprite_purchase4(400) }

spriteset(spriteset_RiesaBt_graphic, "src/graphics/industrial_tram_locomotives.png") { tmpl_sprite_train_block4(400) }
# 68 "src/def_steam.pnml" 2
item(FEAT_TRAINS, RiesaBt) { property { name: string(STR_HK_BT, string(STR_STEAM_LOCO_SUFFIX)); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1940, 1, 1); model_life: param_keep_old_vehs == 0 ? (1961 == 0 ? VEHICLE_NEVER_EXPIRES : 1961 -1940 +30 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 40; retire_early: 30; reliability_decay: 12; loading_speed: 5; cost_factor: 28; running_cost_factor: min(1 + 2 * 10 + (((11) * ((52 * 40) + 80 + (20) * (20)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 20 km/h; misc_flags: bitmask(); cargo_age_period: 285; power: 52 hp; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; cargo_capacity: 1; cargo_allow_refit: [PASS]; default_cargo_type: PASS; weight: 11; tractive_effort_coefficient: 0.9; air_drag_coefficient: 0.7; length: 4; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DEFAULT, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_RiesaBt_graphic; purchase: spriteset_RiesaBt_purchase; cargo_subtype_text: switch_loco_livery_subtype_text; colour_mapping: switch_livery_subtype_loco; purchase_cargo_capacity: return 0; cargo_capacity: return 0; can_attach_wagon: switch_can_attach; } }
# 26 "NG600mm.pnml" 2
# 1 "src/def_diesel.pnml" 1
//Diesel locomotives
# 46 "src/def_diesel.pnml"
//DIESEL_LOCO(Loco_Name, STR_L_NAME, idate, odate, retire, v_life, v_reliab, v_cost, v_vmax, v_power, v_te, v_airdrag, v_mass, v_length) 

# 1 "src/graphics/JungC.pnml" 1


spriteset(spriteset_JungC_purchase, "src/graphics/industrial_tram_locomotives.png")
{ tmpl_sprite_purchase4(300) }

spriteset(spriteset_JungC_graphic, "src/graphics/industrial_tram_locomotives.png") { tmpl_sprite_train_block4(300) }
# 49 "src/def_diesel.pnml" 2
item(FEAT_TRAINS, JungC) { property { name: string(STR_JHF_C, string(STR_DIESEL_LOCO_SUFFIX)); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1940, 1, 1); model_life: param_keep_old_vehs == 0 ? (1975 == 0 ? VEHICLE_NEVER_EXPIRES : 1975 -1940 +10 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 25; retire_early: 10; reliability_decay: 25; loading_speed: 5; cost_factor: 59; running_cost_factor: min(1 + 1 * 10 + (((13) * ((130 * 30) + 50 + (30) * (30)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 30 km/h; misc_flags: bitmask(); cargo_age_period: 285; power: 130 hp; running_cost_base: RUNNING_COST_DIESEL; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_DIESEL; cargo_capacity: 0; weight: 13; tractive_effort_coefficient: 0.8; air_drag_coefficient: 0.5; length: 4; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DEFAULT, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_JungC_graphic; purchase: spriteset_JungC_purchase; cargo_subtype_text: switch_loco_livery_subtype_text; colour_mapping: switch_livery_subtype_loco; purchase_cargo_capacity: return 0; cargo_capacity: return 0; can_attach_wagon: switch_can_attach; } }

# 1 "src/graphics/LKMB.pnml" 1


spriteset(spriteset_LKMB_purchase, "src/graphics/industrial_tram_locomotives.png")
{ tmpl_sprite_purchase3(280) }

spriteset(spriteset_LKMB_graphic, "src/graphics/industrial_tram_locomotives.png") { tmpl_sprite_train_block3(280) }
# 52 "src/def_diesel.pnml" 2
item(FEAT_TRAINS, LKMB) { property { name: string(STR_LKM_B, string(STR_DIESEL_LOCO_SUFFIX)); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1955, 1, 1); model_life: param_keep_old_vehs == 0 ? (2000 == 0 ? VEHICLE_NEVER_EXPIRES : 2000 -1955 +15 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 15; reliability_decay: 15; loading_speed: 5; cost_factor: 28; running_cost_factor: min(1 + 1 * 10 + (((6) * ((35 * 30) + 50 + (15) * (15)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 15 km/h; misc_flags: bitmask(); cargo_age_period: 285; power: 35 hp; running_cost_base: RUNNING_COST_DIESEL; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_DIESEL; cargo_capacity: 0; weight: 6; tractive_effort_coefficient: 0.9; air_drag_coefficient: 0.5; length: 3; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DEFAULT, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_LKMB_graphic; purchase: spriteset_LKMB_purchase; cargo_subtype_text: switch_loco_livery_subtype_text; colour_mapping: switch_livery_subtype_loco; purchase_cargo_capacity: return 0; cargo_capacity: return 0; can_attach_wagon: switch_can_attach; } }
# 27 "NG600mm.pnml" 2
# 1 "src/batloc.pnml" 1
//Diesel locomotives





# 1 "src/graphics/LEWB.pnml" 1


spriteset(spriteset_LEW_purchase, "src/graphics/industrial_tram_locomotives.png")
{ tmpl_sprite_purchase3(0) }

spriteset(spriteset_LEW_graphic, "src/graphics/industrial_tram_locomotives.png") { tmpl_sprite_train_block3(0) }
# 8 "src/batloc.pnml" 2

item(FEAT_TRAINS, BatteryLoc) {
 property {
 name: string(STR_LEW_B);
 climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL);
 introduction_date: date(1967, 1, 1);
 model_life: VEHICLE_NEVER_EXPIRES;
 vehicle_life: 20;
 reliability_decay: 25;
 loading_speed: 5;
 cost_factor: 35;
 running_cost_factor: min(1 + 1 * 10 + (((8) * ((17 * 30) + 50 + (20) * (20)) * 10) >> 15), 255);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 speed: 20 km/h;
 misc_flags: bitmask();
 cargo_age_period: 285;
 power: 17 kW;
 running_cost_base: RUNNING_COST_ELECTRIC;
        track_type: NG60;
        ai_engine_rank: 0;
        engine_class: ENGINE_CLASS_DIESEL;
 cargo_capacity: 0;
 weight: 8;
 tractive_effort_coefficient: 1;
 air_drag_coefficient: 0.3;
 length: 3;
        extra_weight_per_wagon: 0;
        visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
        bitmask_vehicle_info: 0;
    }

    graphics {
 default: spriteset_LEW_graphic;
 purchase: spriteset_LEW_purchase;
 can_attach_wagon: switch_can_attach;
    }
}
# 28 "NG600mm.pnml" 2
# 1 "src/passmailmotor.pnml" 1
//passenger/mail motorized wagon 


switch (FEAT_TRAINS, SELF, switch_livery_subtype_passmailcar, cargo_subtype)
{
  0: return switch_1cc_recolour;
  1: return switch_brown_recolour; //KHAKI1ccBROWN2cc
  2: return switch_green_recolour; //GRAY1ccGREEN2cc
     return CB_FAILED;
}

switch (FEAT_TRAINS, SELF, switch_passmailmotor_livery_subtype_text, cargo_subtype)
{
  0: return string(STR_MOTORCAR,string(STR_LIVERY_Q2CC));
  1: return string(STR_MOTORCAR,string(STR_LIVERY_BROWN));
  2: return string(STR_MOTORCAR,string(STR_LIVERY_GREEN));
     return CB_RESULT_NO_TEXT;
}


switch (FEAT_TRAINS, SELF, switch_high_diesel_smoke_effect, STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL, -3, 0, 7), 0x100)
) {
return 1;
}



spriteset(spriteset_PassMailMotorCar_purchase, "src/graphics/passenger_wagons_4.png")
{ tmpl_sprite_purchase3(40) }

spriteset(spriteset_PassMailMotorCar_graphic, "src/graphics/passenger_wagons_4.png") { tmpl_sprite_train_block5(40) }


item(FEAT_TRAINS, PassMailMotorCar) {
 property {
 name: string(STR_MOTORCAR,string(STR_PMMC_NAME));
 climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL);
 introduction_date: date(1935, 1, 1);
 model_life: param_keep_old_vehs == 0 ? 50 : VEHICLE_NEVER_EXPIRES;
 vehicle_life: 30;
 retire_early: 10;
 reliability_decay: 10;
 loading_speed: 5;
 cost_factor: 30;
 refit_cost: 0;
 running_cost_factor: min(1 + 1 * 10 + (((10) * ((25 * 30) + 50 + (40) * (40)) * 10) >> 15), 255);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 speed: 40 km/h;
 misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT);
 cargo_age_period: 285;
 cargo_capacity: 20;
 refittable_cargo_classes: bitmask(CC_PASSENGERS,CC_MAIL,CC_ARMOURED);
 power: 35 hp;
 tractive_effort_coefficient: 1.0;
 running_cost_base: RUNNING_COST_DIESEL;
        track_type: NG60;
        ai_engine_rank: 0;
        engine_class: ENGINE_CLASS_DIESEL;
 weight: 12;
 length: 5;
        extra_weight_per_wagon: 0;
        effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
        bitmask_vehicle_info: 0;
    }

    graphics {
 default: spriteset_PassMailMotorCar_graphic;
 purchase: spriteset_PassMailMotorCar_purchase;
 create_effect: switch_high_diesel_smoke_effect;
 colour_mapping: switch_livery_subtype_passmailcar;
 cargo_subtype_text: switch_passmailmotor_livery_subtype_text;
 can_attach_wagon: switch_can_attach;
    }
}
# 29 "NG600mm.pnml" 2
# 1 "src/EL3.pnml" 1
//Electric locomotives





# 1 "src/graphics/LEW_EL3.pnml" 1


spriteset(spriteset_EL3_purchase, "src/graphics/industrial_tram_locomotives.png")
{ tmpl_sprite_purchase5mirror(80) }

spriteset(spriteset_EL3_graphic, "src/graphics/industrial_tram_locomotives.png") { tmpl_sprite_train_block5mirror(80) }
# 8 "src/EL3.pnml" 2

item(FEAT_TRAINS, LEW_EL3) {
 property {
 name: string(STR_EL3);
 climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL);
 introduction_date: date(1951, 1, 1);
 model_life: VEHICLE_NEVER_EXPIRES;
 vehicle_life: 20;
 reliability_decay: 20;
 loading_speed: 5;
 cost_factor: 55;
 running_cost_factor: min(1 + 1 * 10 + (((75) * ((620 * 30) + 50 + (40) * (40)) * 10) >> 15), 255);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 speed: 40 km/h;
 misc_flags: bitmask();
 cargo_age_period: 285;
 power: 620 kW;
 running_cost_base: RUNNING_COST_ELECTRIC;
        track_type: NG6E;
        ai_engine_rank: 0;
        engine_class: ENGINE_CLASS_ELECTRIC;
 cargo_capacity: 1;
 cargo_allow_refit: [PASS];
 default_cargo_type: PASS;
 weight: 75;
 tractive_effort_coefficient: 1;
 air_drag_coefficient: 0.8;
 length: 6;
        extra_weight_per_wagon: 0;
        visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DEFAULT, 3, DISABLE_WAGON_POWER);
        bitmask_vehicle_info: 0;
    }

    graphics {
 default: spriteset_EL3_graphic;
 purchase: spriteset_EL3_purchase;
 can_attach_wagon: switch_can_attach;
 cargo_subtype_text: switch_loco_livery_subtype_text;
 colour_mapping: switch_livery_subtype_loco;
        purchase_cargo_capacity: return 0;
        cargo_capacity: return 0;
    }
}
# 30 "NG600mm.pnml" 2
/* cars */
# 1 "src/def_passenger.pnml" 1
//passenger wagons
# 42 "src/def_passenger.pnml"
//CAR_PASSENGER(Wagon_Name, STR_W_NAME, p_comfort, p_capacity, idate, odate, v_life, v_cost, v_vmax, v_mass, v_length)

# 1 "src/graphics/Pass2.pnml" 1


spriteset(spriteset_Pass2_purchase, "src/graphics/passenger_wagons_2.png")
{ tmpl_sprite_purchase3(0) }

spriteset(spriteset_Pass2_graphic, "src/graphics/passenger_wagons_2.png") { tmpl_sprite_train_block3(0) }
# 45 "src/def_passenger.pnml" 2
item(FEAT_TRAINS, Pass2) { property { name: string(STR_PASS2); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1825, 1, 1); model_life: param_keep_old_vehs == 0 ? (1926 == 0 ? VEHICLE_NEVER_EXPIRES : 1926 -1825 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 38; running_cost_factor: min(1 + 1 * 10 + (((3) * ((0 * 40) + 80 + (20) * (20)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 20 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 205; cargo_capacity: 20; refittable_cargo_classes: bitmask(CC_PASSENGERS); power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 3; length: 3; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_Pass2_graphic; purchase: spriteset_Pass2_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_car; } }


# 1 "src/graphics/Pass4.pnml" 1


spriteset(spriteset_Pass4_purchase, "src/graphics/passenger_wagons_4.png")
{ tmpl_sprite_purchase3(0) }

spriteset(spriteset_Pass4_graphic, "src/graphics/passenger_wagons_4.png") { tmpl_sprite_train_block5(0) }
# 49 "src/def_passenger.pnml" 2
item(FEAT_TRAINS, Pass4) { property { name: string(STR_PASS4); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1920, 1, 1); model_life: param_keep_old_vehs == 0 ? (1976 == 0 ? VEHICLE_NEVER_EXPIRES : 1976 -1920 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 58; running_cost_factor: min(1 + 1 * 10 + (((5) * ((0 * 40) + 80 + (40) * (40)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 40 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 40; refittable_cargo_classes: bitmask(CC_PASSENGERS); power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 5; length: 5; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_Pass4_graphic; purchase: spriteset_Pass4_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_car; } }
# 32 "NG600mm.pnml" 2
# 1 "src/passmailcar.pnml" 1
//passenger/mail wagon 


switch (FEAT_TRAINS, SELF, switch_passmailcar_livery_subtype_text, cargo_subtype)
{
  0: return string(STR_LIVERY_Q2CC);
  1: return string(STR_LIVERY_BROWN);
  2: return string(STR_LIVERY_GREEN);
     return CB_RESULT_NO_TEXT;
}


spriteset(spriteset_PassMailCar_purchase, "src/graphics/passenger_wagons_4.png")

{ tmpl_sprite_purchase3(20) }

spriteset(spriteset_PassMailCar_graphic, "src/graphics/passenger_wagons_4.png") { tmpl_sprite_train_block5(20) }


item(FEAT_TRAINS, PassMailCar) {
 property {
 name: string(STR_PMMC_NAME);
 climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL);
 introduction_date: date(1930, 1, 1);
 model_life: VEHICLE_NEVER_EXPIRES;
 vehicle_life: 30;
 retire_early: 10;
 reliability_decay: 10;
 loading_speed: 5;
 cost_factor: 51;
 refit_cost: 0;
 running_cost_factor: min(1 + 1 * 10 + (((4) * ((0 * 30) + 50 + (40) * (40)) * 10) >> 15), 255);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 speed: 40 km/h;
 misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT);
 cargo_age_period: 205;
 cargo_capacity: 20;
 refittable_cargo_classes: bitmask(CC_PASSENGERS,CC_MAIL,CC_ARMOURED);
 power: 0;
 tractive_effort_coefficient: 0.5;
 running_cost_base: RUNNING_COST_DIESEL;
        track_type: NG60;
        ai_engine_rank: 0;
        engine_class: ENGINE_CLASS_DIESEL;
 weight: 4;
 length: 5;
        extra_weight_per_wagon: 0;
        effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_DIESEL;
        bitmask_vehicle_info: 0;
    }

    graphics {
 default: spriteset_PassMailCar_graphic;
 purchase: spriteset_PassMailCar_purchase;
 colour_mapping: switch_livery_subtype_passmailcar;
 cargo_subtype_text: switch_passmailcar_livery_subtype_text;
    }
}
# 33 "NG600mm.pnml" 2
# 1 "src/def_boxcar.pnml" 1
//boxcars
# 50 "src/def_boxcar.pnml"
//CAR_BOX(Wagon_Name, STR_W_NAME, c_capacity, idate, odate, v_cost, v_r_c, v_vmax, v_mass, v_length)

# 1 "src/graphics/Boxcar1.pnml" 1


spriteset(spriteset_Boxcar1_purchase, "src/graphics/industrial_tram_wagons_1.png")
{ tmpl_sprite_purchase3mirror(0) }

spriteset(spriteset_Boxcar1_graphic, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(0) }
# 53 "src/def_boxcar.pnml" 2
switch(FEAT_TRAINS, SELF, capacity_Boxcar1_switch, cargo_subtype) { return min((4 * 16 / cargo_unit_weight), (4 * 1)); } item(FEAT_TRAINS, Boxcar1) { property { name: string(STR_BOXCAR1); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1700, 1, 1); model_life: param_keep_old_vehs == 0 ? (1926 == 0 ? VEHICLE_NEVER_EXPIRES : 1926 -1700 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 8; running_cost_factor: 0; sprite_id: SPRITE_ID_NEW_TRAIN; speed: 15 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 4; refittable_cargo_classes: bitmask(CC_PIECE_GOODS,CC_COVERED,CC_EXPRESS,CC_MAIL,CC_ARMOURED); non_refittable_cargo_classes: bitmask(CC_PASSENGERS,CC_OVERSIZED); cargo_allow_refit: [GRAI,WHEA,MAIZ,FRUT]; cargo_disallow_refit: [LVST,WOOD,WDPR]; default_cargo_type: GOOD; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 1; length: 3; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_Boxcar1_graphic; purchase: spriteset_Boxcar1_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_car; cargo_capacity: capacity_Boxcar1_switch; } }
# 1 "src/graphics/Boxcar2.pnml" 1


spriteset(spriteset_Boxcar2_purchase, "src/graphics/industrial_tram_wagons_2.png")
{ tmpl_sprite_purchase4mirror(0) }

spriteset(spriteset_Boxcar2_graphic, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block4mirror(0) }
# 55 "src/def_boxcar.pnml" 2
switch(FEAT_TRAINS, SELF, capacity_Boxcar2_switch, cargo_subtype) { return min((6 * 16 / cargo_unit_weight), (4 * 2)); } item(FEAT_TRAINS, Boxcar2) { property { name: string(STR_BOXCAR2); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1881, 1, 1); model_life: param_keep_old_vehs == 0 ? (1946 == 0 ? VEHICLE_NEVER_EXPIRES : 1946 -1881 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 16; running_cost_factor: 0; sprite_id: SPRITE_ID_NEW_TRAIN; speed: 20 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 6; refittable_cargo_classes: bitmask(CC_PIECE_GOODS,CC_COVERED,CC_EXPRESS,CC_MAIL,CC_ARMOURED); non_refittable_cargo_classes: bitmask(CC_PASSENGERS,CC_OVERSIZED); cargo_allow_refit: [GRAI,WHEA,MAIZ,FRUT]; cargo_disallow_refit: [LVST,WOOD,WDPR]; default_cargo_type: GOOD; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 2; length: 4; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_Boxcar2_graphic; purchase: spriteset_Boxcar2_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_car; cargo_capacity: capacity_Boxcar2_switch; } }
# 1 "src/graphics/Boxcar3.pnml" 1


spriteset(spriteset_Boxcar3_purchase, "src/graphics/industrial_tram_wagons_3.png")
{ tmpl_sprite_purchase5mirror(0) }

spriteset(spriteset_Boxcar3_graphic, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(0) }
# 57 "src/def_boxcar.pnml" 2
switch(FEAT_TRAINS, SELF, capacity_Boxcar3_switch, cargo_subtype) { return min((8 * 16 / cargo_unit_weight), (4 * 3)); } item(FEAT_TRAINS, Boxcar3) { property { name: string(STR_BOXCAR3); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1931, 1, 1); model_life: param_keep_old_vehs == 0 ? (1976 == 0 ? VEHICLE_NEVER_EXPIRES : 1976 -1931 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 20; running_cost_factor: 0; sprite_id: SPRITE_ID_NEW_TRAIN; speed: 30 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 8; refittable_cargo_classes: bitmask(CC_PIECE_GOODS,CC_COVERED,CC_EXPRESS,CC_MAIL,CC_ARMOURED); non_refittable_cargo_classes: bitmask(CC_PASSENGERS,CC_OVERSIZED); cargo_allow_refit: [GRAI,WHEA,MAIZ,FRUT]; cargo_disallow_refit: [LVST,WOOD,WDPR]; default_cargo_type: GOOD; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 3; length: 5; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_Boxcar3_graphic; purchase: spriteset_Boxcar3_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_car; cargo_capacity: capacity_Boxcar3_switch; } }
# 1 "src/graphics/Boxcar4.pnml" 1


spriteset(spriteset_Boxcar4_purchase, "src/graphics/industrial_tram_wagons_4.png")
{ tmpl_sprite_purchase5(0) }

spriteset(spriteset_Boxcar4_graphic1, "src/graphics/industrial_tram_wagons_4.png") { tmpl_sprite_train_block5(0) }

spriteset(spriteset_Boxcar4_graphic2, "src/graphics/industrial_tram_wagons_4.png") { tmpl_sprite_train_block5(20) }

random_switch(FEAT_TRAINS, SELF, spriteset_Boxcar4_graphic) {
    2: return spriteset_Boxcar4_graphic2;
    1: return spriteset_Boxcar4_graphic1;
}
# 59 "src/def_boxcar.pnml" 2
switch(FEAT_TRAINS, SELF, capacity_Boxcar4_switch, cargo_subtype) { return min((10 * 16 / cargo_unit_weight), (4 * 5)); } item(FEAT_TRAINS, Boxcar4) { property { name: string(STR_BOXCAR4); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1951, 1, 1); model_life: param_keep_old_vehs == 0 ? (0 == 0 ? VEHICLE_NEVER_EXPIRES : 0 -1951 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 26; running_cost_factor: 2; sprite_id: SPRITE_ID_NEW_TRAIN; speed: 40 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 10; refittable_cargo_classes: bitmask(CC_PIECE_GOODS,CC_COVERED,CC_EXPRESS,CC_MAIL,CC_ARMOURED); non_refittable_cargo_classes: bitmask(CC_PASSENGERS,CC_OVERSIZED); cargo_allow_refit: [GRAI,WHEA,MAIZ,FRUT]; cargo_disallow_refit: [LVST,WOOD,WDPR]; default_cargo_type: GOOD; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 5; length: 6; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_Boxcar4_graphic; purchase: spriteset_Boxcar4_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_car; cargo_capacity: capacity_Boxcar4_switch; } }
# 34 "NG600mm.pnml" 2
# 1 "src/def_stockcar.pnml" 1
//stockcars
# 50 "src/def_stockcar.pnml"
//CAR_STOCK(Wagon_Name, STR_W_NAME, c_capacity, idate, odate,  v_cost, v_vmax, v_mass, v_length)

# 1 "src/graphics/Stockcar1.pnml" 1


spriteset(spriteset_Stockcar1_purchase, "src/graphics/industrial_tram_wagons_1.png")
{ tmpl_sprite_purchase3mirror(20) }

spriteset(spriteset_Stockcar1_graphic, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(20) }
# 53 "src/def_stockcar.pnml" 2
switch(FEAT_TRAINS, SELF, capacity_Stockcar1_switch, cargo_subtype) { return min((6 * 16 / cargo_unit_weight), (5 * 1)); } item(FEAT_TRAINS, Stockcar1) { property { name: string(STR_STOCKCAR1); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1841, 1, 1); model_life: param_keep_old_vehs == 0 ? (1926 == 0 ? VEHICLE_NEVER_EXPIRES : 1926 -1841 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 8; running_cost_factor: min(1 + 0 * 10 + (((0) * ((0 * 40) + 80 + (15) * (15)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 15 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 6; refittable_cargo_classes: bitmask(CC_PIECE_GOODS); non_refittable_cargo_classes: bitmask(CC_REFRIGERATED,CC_PASSENGERS,CC_LIQUID,CC_OVERSIZED,CC_COVERED,CC_BULK,CC_EXPRESS); cargo_allow_refit: [FRUT,PASS]; cargo_disallow_refit: [WOOD,WDPR,PAPR,STEL]; default_cargo_type: LVST; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 1; length: 3; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_Stockcar1_graphic; purchase: spriteset_Stockcar1_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_car; cargo_capacity: capacity_Stockcar1_switch; } }
# 1 "src/graphics/Stockcar2.pnml" 1


spriteset(spriteset_Stockcar2_purchase, "src/graphics/industrial_tram_wagons_2.png")
{ tmpl_sprite_purchase4mirror(20) }

spriteset(spriteset_Stockcar2_graphic, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block4mirror(20) }
# 55 "src/def_stockcar.pnml" 2
switch(FEAT_TRAINS, SELF, capacity_Stockcar2_switch, cargo_subtype) { return min((8 * 16 / cargo_unit_weight), (5 * 2)); } item(FEAT_TRAINS, Stockcar2) { property { name: string(STR_STOCKCAR2); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1891, 1, 1); model_life: param_keep_old_vehs == 0 ? (1946 == 0 ? VEHICLE_NEVER_EXPIRES : 1946 -1891 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 16; running_cost_factor: min(1 + 0 * 10 + (((0) * ((0 * 40) + 80 + (20) * (20)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 20 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 8; refittable_cargo_classes: bitmask(CC_PIECE_GOODS); non_refittable_cargo_classes: bitmask(CC_REFRIGERATED,CC_PASSENGERS,CC_LIQUID,CC_OVERSIZED,CC_COVERED,CC_BULK,CC_EXPRESS); cargo_allow_refit: [FRUT,PASS]; cargo_disallow_refit: [WOOD,WDPR,PAPR,STEL]; default_cargo_type: LVST; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 2; length: 4; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_Stockcar2_graphic; purchase: spriteset_Stockcar2_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_car; cargo_capacity: capacity_Stockcar2_switch; } }
# 1 "src/graphics/Stockcar3.pnml" 1


spriteset(spriteset_Stockcar3_purchase, "src/graphics/industrial_tram_wagons_3.png")
{ tmpl_sprite_purchase5mirror(20) }

spriteset(spriteset_Stockcar3_graphic, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(20) }
# 57 "src/def_stockcar.pnml" 2
switch(FEAT_TRAINS, SELF, capacity_Stockcar3_switch, cargo_subtype) { return min((12 * 16 / cargo_unit_weight), (5 * 3)); } item(FEAT_TRAINS, Stockcar3) { property { name: string(STR_STOCKCAR3); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1931, 1, 1); model_life: param_keep_old_vehs == 0 ? (0 == 0 ? VEHICLE_NEVER_EXPIRES : 0 -1931 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 20; running_cost_factor: min(1 + 0 * 10 + (((0) * ((0 * 40) + 80 + (30) * (30)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 30 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 12; refittable_cargo_classes: bitmask(CC_PIECE_GOODS); non_refittable_cargo_classes: bitmask(CC_REFRIGERATED,CC_PASSENGERS,CC_LIQUID,CC_OVERSIZED,CC_COVERED,CC_BULK,CC_EXPRESS); cargo_allow_refit: [FRUT,PASS]; cargo_disallow_refit: [WOOD,WDPR,PAPR,STEL]; default_cargo_type: LVST; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 3; length: 5; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_Stockcar3_graphic; purchase: spriteset_Stockcar3_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_car; cargo_capacity: capacity_Stockcar3_switch; } }
# 35 "NG600mm.pnml" 2
# 1 "src/def_tankcar.pnml" 1
//tankcars
# 44 "src/def_tankcar.pnml"
//CAR_STOCK(Wagon_Name, STR_W_NAME, c_capacity, idate, odate,  v_cost, v_vmax, v_mass, v_length)

# 1 "src/graphics/Tankcar1.pnml" 1


spriteset(spriteset_Tankcar1_purchase, "src/graphics/industrial_tram_wagons_1.png")
{ tmpl_sprite_purchase3mirror(40) }

spriteset(spriteset_Tankcar1_graphic, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(40) }
# 47 "src/def_tankcar.pnml" 2
item(FEAT_TRAINS, Tankcar1) { property { name: string(STR_TANKCAR1); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1851, 1, 1); model_life: param_keep_old_vehs == 0 ? (1926 == 0 ? VEHICLE_NEVER_EXPIRES : 1926 -1851 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 9; running_cost_factor: min(1 + 0 * 10 + (((0) * ((0 * 40) + 80 + (0) * (0)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 15 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 6; refittable_cargo_classes: bitmask(CC_LIQUID); cargo_disallow_refit: [WATR,MILK,BEER]; default_cargo_type: OIL_; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_DIESEL; weight: 2; length: 3; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_Tankcar1_graphic; purchase: spriteset_Tankcar1_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_car; } }
# 1 "src/graphics/Tankcar2.pnml" 1


spriteset(spriteset_Tankcar2_purchase, "src/graphics/industrial_tram_wagons_2.png")
{ tmpl_sprite_purchase4mirror(40) }

spriteset(spriteset_Tankcar2_graphic, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block4mirror(40) }
# 49 "src/def_tankcar.pnml" 2
item(FEAT_TRAINS, Tankcar2) { property { name: string(STR_TANKCAR2); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1901, 1, 1); model_life: param_keep_old_vehs == 0 ? (1946 == 0 ? VEHICLE_NEVER_EXPIRES : 1946 -1901 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 17; running_cost_factor: min(1 + 0 * 10 + (((0) * ((0 * 40) + 80 + (0) * (0)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 20 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 8; refittable_cargo_classes: bitmask(CC_LIQUID); cargo_disallow_refit: [WATR,MILK,BEER]; default_cargo_type: OIL_; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_DIESEL; weight: 3; length: 4; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_Tankcar2_graphic; purchase: spriteset_Tankcar2_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_car; } }
# 1 "src/graphics/Tankcar3.pnml" 1


spriteset(spriteset_Tankcar3_purchase, "src/graphics/industrial_tram_wagons_3.png")
{ tmpl_sprite_purchase5mirror(40) }

spriteset(spriteset_Tankcar3_graphic, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(40) }
# 51 "src/def_tankcar.pnml" 2
item(FEAT_TRAINS, Tankcar3) { property { name: string(STR_TANKCAR3); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1931, 1, 1); model_life: param_keep_old_vehs == 0 ? (1986 == 0 ? VEHICLE_NEVER_EXPIRES : 1986 -1931 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 22; running_cost_factor: min(1 + 0 * 10 + (((0) * ((0 * 40) + 80 + (0) * (0)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 30 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 11; refittable_cargo_classes: bitmask(CC_LIQUID); cargo_disallow_refit: [WATR,MILK,BEER]; default_cargo_type: OIL_; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_DIESEL; weight: 4; length: 5; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_Tankcar3_graphic; purchase: spriteset_Tankcar3_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_car; } }
# 36 "NG600mm.pnml" 2
# 1 "src/def_tankcarspec.pnml" 1
//tankcars
# 43 "src/def_tankcarspec.pnml"
//CAR_STOCK(Wagon_Name, STR_W_NAME, c_capacity, idate, odate,  v_cost, v_vmax, v_mass, v_length)

# 1 "src/graphics/TankcarSpec1.pnml" 1


spriteset(spriteset_TankcarSpec1_purchase, "src/graphics/industrial_tram_wagons_1.png")
{ tmpl_sprite_purchase3mirror(60) }

spriteset(spriteset_TankcarSpec1_graphic, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(60) }
# 46 "src/def_tankcarspec.pnml" 2
item(FEAT_TRAINS, TankcarSpec1) { property { name: string(STR_TANKCARSPEC1); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1841, 1, 1); model_life: param_keep_old_vehs == 0 ? (1926 == 0 ? VEHICLE_NEVER_EXPIRES : 1926 -1841 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 10; running_cost_factor: min(1 + 0 * 10 + (((0) * ((0 * 40) + 80 + (0) * (0)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 15 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 4; cargo_allow_refit: [WATR,MILK,BEER]; default_cargo_type: WATR; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 1; length: 3; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_TankcarSpec1_graphic; purchase: spriteset_TankcarSpec1_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_car; } }
# 1 "src/graphics/TankcarSpec2.pnml" 1


spriteset(spriteset_TankcarSpec2_purchase, "src/graphics/industrial_tram_wagons_2.png")
{ tmpl_sprite_purchase4mirror(60) }

spriteset(spriteset_TankcarSpec2_graphic, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block4mirror(60) }
# 48 "src/def_tankcarspec.pnml" 2
item(FEAT_TRAINS, TankcarSpec2) { property { name: string(STR_TANKCARSPEC2); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1901, 1, 1); model_life: param_keep_old_vehs == 0 ? (1946 == 0 ? VEHICLE_NEVER_EXPIRES : 1946 -1901 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 18; running_cost_factor: min(1 + 0 * 10 + (((0) * ((0 * 40) + 80 + (0) * (0)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 20 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 6; cargo_allow_refit: [WATR,MILK,BEER]; default_cargo_type: WATR; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 2; length: 4; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_TankcarSpec2_graphic; purchase: spriteset_TankcarSpec2_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_car; } }
# 1 "src/graphics/TankcarSpec3.pnml" 1


spriteset(spriteset_TankcarSpec3_purchase, "src/graphics/industrial_tram_wagons_3.png")
{ tmpl_sprite_purchase5mirror(60) }

spriteset(spriteset_TankcarSpec3_graphic, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(60) }
# 50 "src/def_tankcarspec.pnml" 2
item(FEAT_TRAINS, TankcarSpec3) { property { name: string(STR_TANKCARSPEC3); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1931, 1, 1); model_life: param_keep_old_vehs == 0 ? (1976 == 0 ? VEHICLE_NEVER_EXPIRES : 1976 -1931 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 24; running_cost_factor: min(1 + 0 * 10 + (((0) * ((0 * 40) + 80 + (0) * (0)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 30 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 8; cargo_allow_refit: [WATR,MILK,BEER]; default_cargo_type: WATR; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 3; length: 5; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: spriteset_TankcarSpec3_graphic; purchase: spriteset_TankcarSpec3_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_car; } }
# 37 "NG600mm.pnml" 2
# 1 "src/def_flatcar.pnml" 1
//flatcars
# 51 "src/def_flatcar.pnml"
//CAR_STOCK(Wagon_Name, STR_W_NAME, c_capacity, idate, odate,  v_cost, v_vmax, v_mass, v_length)

# 1 "src/graphics/Flatcar1.pnml" 1


spriteset(spriteset_Flatcar1_purchase, "src/graphics/industrial_tram_wagons_1.png")
{ tmpl_sprite_purchase3mirror(80) }

spriteset(ss_Flatcar1_empty, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(80) }


spriteset(ss_Flatcar1_crate, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(340) }


spriteset(ss_Flatcar1_wood2, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(100) }

spriteset(ss_Flatcar1_wood, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(120) }


spriteset(ss_Flatcar1_stel, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(260) }


spriteset(ss_Flatcar1_papr, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(280) }


spriteset(ss_Flatcar1_wdpr2, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(300) }

spriteset(ss_Flatcar1_wdpr, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(320) }


spritegroup sgroup_Flatcar1_graphic {
    loaded: [ss_Flatcar1_empty, ss_Flatcar1_crate];
    loading: [ss_Flatcar1_empty, ss_Flatcar1_crate];
}

spritegroup sgroup_Flatcar1_wood {
    loaded: [ss_Flatcar1_empty, ss_Flatcar1_wood2, ss_Flatcar1_wood];
    loading: [ss_Flatcar1_empty, ss_Flatcar1_wood2, ss_Flatcar1_wood];
}

spritegroup sgroup_Flatcar1_wdpr {
    loaded: [ss_Flatcar1_empty, ss_Flatcar1_wdpr2, ss_Flatcar1_wdpr];
    loading: [ss_Flatcar1_empty, ss_Flatcar1_wdpr2, ss_Flatcar1_wdpr];
}

spritegroup sgroup_Flatcar1_stel {
    loaded: [ss_Flatcar1_empty, ss_Flatcar1_stel];
    loading: [ss_Flatcar1_empty, ss_Flatcar1_stel];
}

spritegroup sgroup_Flatcar1_papr {
    loaded: [ss_Flatcar1_empty, ss_Flatcar1_papr];
    loading: [ss_Flatcar1_empty, ss_Flatcar1_papr];
}
# 54 "src/def_flatcar.pnml" 2
item(FEAT_TRAINS, Flatcar1) { property { name: string(STR_FLATCAR1); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1700, 1, 1); model_life: param_keep_old_vehs == 0 ? (1926 == 0 ? VEHICLE_NEVER_EXPIRES : 1926 -1700 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 5; running_cost_factor: min(1 + 0 * 10 + (((0) * ((0 * 40) + 80 + (0) * (0)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 15 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 4; refittable_cargo_classes: bitmask(CC_PIECE_GOODS,CC_EXPRESS); non_refittable_cargo_classes: bitmask(CC_REFRIGERATED,CC_PASSENGERS,CC_LIQUID,CC_COVERED,CC_POWDERIZED,CC_BULK); cargo_allow_refit: [WDPR]; cargo_disallow_refit: [FRUT,LVST]; default_cargo_type: WOOD; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 1; length: 3; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { WOOD: sgroup_Flatcar1_wood; WDPR: sgroup_Flatcar1_wdpr; STEL: sgroup_Flatcar1_stel; IRON: sgroup_Flatcar1_stel; PAPR: sgroup_Flatcar1_papr; default: sgroup_Flatcar1_graphic; purchase: spriteset_Flatcar1_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_mapping_cargo; } }
# 1 "src/graphics/Flatcar2.pnml" 1


spriteset(spriteset_Flatcar2_purchase, "src/graphics/industrial_tram_wagons_2.png")
{ tmpl_sprite_purchase4mirror(80) }

spriteset(ss_Flatcar2_empty, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block4mirror(80) }


spriteset(ss_Flatcar2_crate, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block4mirror(340) }


spriteset(ss_Flatcar2_wood2, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block4mirror(100) }

spriteset(ss_Flatcar2_wood, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block4mirror(120) }


spriteset(ss_Flatcar2_stel, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block4mirror(260) }


spriteset(ss_Flatcar2_papr, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block4mirror(280) }


spriteset(ss_Flatcar2_wdpr2, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block4mirror(300) }

spriteset(ss_Flatcar2_wdpr, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block4mirror(320) }


spritegroup sgroup_Flatcar2_graphic {
    loaded: [ss_Flatcar2_empty, ss_Flatcar2_crate];
    loading: [ss_Flatcar2_empty, ss_Flatcar2_crate];
}

spritegroup sgroup_Flatcar2_wood {
    loaded: [ss_Flatcar2_empty, ss_Flatcar2_wood2, ss_Flatcar2_wood];
    loading: [ss_Flatcar2_empty, ss_Flatcar2_wood2, ss_Flatcar2_wood];
}

spritegroup sgroup_Flatcar2_wdpr {
    loaded: [ss_Flatcar2_empty, ss_Flatcar2_wdpr2, ss_Flatcar2_wdpr];
    loading: [ss_Flatcar2_empty, ss_Flatcar2_wdpr2, ss_Flatcar2_wdpr];
}

spritegroup sgroup_Flatcar2_stel {
    loaded: [ss_Flatcar2_empty, ss_Flatcar2_stel];
    loading: [ss_Flatcar2_empty, ss_Flatcar2_stel];
}

spritegroup sgroup_Flatcar2_papr {
    loaded: [ss_Flatcar2_empty, ss_Flatcar2_papr];
    loading: [ss_Flatcar2_empty, ss_Flatcar2_papr];
}
# 56 "src/def_flatcar.pnml" 2
item(FEAT_TRAINS, Flatcar2) { property { name: string(STR_FLATCAR2); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1891, 1, 1); model_life: param_keep_old_vehs == 0 ? (1946 == 0 ? VEHICLE_NEVER_EXPIRES : 1946 -1891 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 8; running_cost_factor: min(1 + 0 * 10 + (((0) * ((0 * 40) + 80 + (0) * (0)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 20 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 6; refittable_cargo_classes: bitmask(CC_PIECE_GOODS,CC_EXPRESS); non_refittable_cargo_classes: bitmask(CC_REFRIGERATED,CC_PASSENGERS,CC_LIQUID,CC_COVERED,CC_POWDERIZED,CC_BULK); cargo_allow_refit: [WDPR]; cargo_disallow_refit: [FRUT,LVST]; default_cargo_type: WOOD; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 2; length: 4; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { WOOD: sgroup_Flatcar2_wood; WDPR: sgroup_Flatcar2_wdpr; STEL: sgroup_Flatcar2_stel; IRON: sgroup_Flatcar2_stel; PAPR: sgroup_Flatcar2_papr; default: sgroup_Flatcar2_graphic; purchase: spriteset_Flatcar2_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_mapping_cargo; } }
# 1 "src/graphics/Flatcar3.pnml" 1


spriteset(spriteset_Flatcar3_purchase, "src/graphics/industrial_tram_wagons_3.png")
{ tmpl_sprite_purchase5mirror(80) }

spriteset(ss_Flatcar3_empty, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(80) }


spriteset(ss_Flatcar3_crate, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(340) }


spriteset(ss_Flatcar3_wood2, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(100) }

spriteset(ss_Flatcar3_wood, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(120) }


spriteset(ss_Flatcar3_stel, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(260) }


spriteset(ss_Flatcar3_papr, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(280) }


spriteset(ss_Flatcar3_wdpr2, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(300) }

spriteset(ss_Flatcar3_wdpr, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(320) }


spritegroup sgroup_Flatcar3_graphic {
    loaded: [ss_Flatcar3_empty, ss_Flatcar3_crate];
    loading: [ss_Flatcar3_empty, ss_Flatcar3_crate];
}

spritegroup sgroup_Flatcar3_wood {
    loaded: [ss_Flatcar3_empty, ss_Flatcar3_wood2, ss_Flatcar3_wood];
    loading: [ss_Flatcar3_empty, ss_Flatcar3_wood2, ss_Flatcar3_wood];
}

spritegroup sgroup_Flatcar3_wdpr {
    loaded: [ss_Flatcar3_empty, ss_Flatcar3_wdpr2, ss_Flatcar3_wdpr];
    loading: [ss_Flatcar3_empty, ss_Flatcar3_wdpr2, ss_Flatcar3_wdpr];
}

spritegroup sgroup_Flatcar3_stel {
    loaded: [ss_Flatcar3_empty, ss_Flatcar3_stel];
    loading: [ss_Flatcar3_empty, ss_Flatcar3_stel];
}

spritegroup sgroup_Flatcar3_papr {
    loaded: [ss_Flatcar3_empty, ss_Flatcar3_papr];
    loading: [ss_Flatcar3_empty, ss_Flatcar3_papr];
}
# 58 "src/def_flatcar.pnml" 2
item(FEAT_TRAINS, Flatcar3) { property { name: string(STR_FLATCAR3); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1931, 1, 1); model_life: param_keep_old_vehs == 0 ? (0 == 0 ? VEHICLE_NEVER_EXPIRES : 0 -1931 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 14; running_cost_factor: min(1 + 0 * 10 + (((0) * ((0 * 40) + 80 + (0) * (0)) * 10) >> 15), 255); sprite_id: SPRITE_ID_NEW_TRAIN; speed: 30 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 8; refittable_cargo_classes: bitmask(CC_PIECE_GOODS,CC_EXPRESS); non_refittable_cargo_classes: bitmask(CC_REFRIGERATED,CC_PASSENGERS,CC_LIQUID,CC_COVERED,CC_POWDERIZED,CC_BULK); cargo_allow_refit: [WDPR]; cargo_disallow_refit: [FRUT,LVST]; default_cargo_type: WOOD; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 3; length: 5; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { WOOD: sgroup_Flatcar3_wood; WDPR: sgroup_Flatcar3_wdpr; STEL: sgroup_Flatcar3_stel; IRON: sgroup_Flatcar3_stel; PAPR: sgroup_Flatcar3_papr; default: sgroup_Flatcar3_graphic; purchase: spriteset_Flatcar3_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_mapping_cargo; } }
# 38 "NG600mm.pnml" 2
# 1 "src/logtrailers.pnml" 1
//flatcars for wood logs

# 1 "src/graphics/Woodtrailers.pnml" 1


spriteset(spriteset_Woodtrailers_purchase, "src/graphics/industrial_tram_wagons_3.png")
{ tmpl_sprite_purchase5mirror(380) }

spriteset(ss_Woodtrailers_empty, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(380) }



spriteset(ss_Woodtrailers_wood2, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(400) }

spriteset(ss_Woodtrailers_wood, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(420) }


spritegroup sgroup_Woodtrailers_wood {
    loaded: [ss_Woodtrailers_empty, ss_Woodtrailers_wood2, ss_Woodtrailers_wood];
    loading: [ss_Woodtrailers_empty, ss_Woodtrailers_wood2, ss_Woodtrailers_wood];
}
# 4 "src/logtrailers.pnml" 2


item(FEAT_TRAINS, Woodtrailers) {
 property {
 name: string(STR_LOGTRAILER);
 climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL);
 introduction_date: date(1855, 1, 1);
 model_life: param_keep_old_vehs == 0 ? 220 : VEHICLE_NEVER_EXPIRES;
 vehicle_life: 20;
 retire_early: 0;
 reliability_decay: 20;
 loading_speed: 10;
 cost_factor: 8;
 running_cost_factor: min(1 + 0 * 10 + (((0) * ((0 * 40) + 80 + (0) * (0)) * 10) >> 15), 255);
 sprite_id: SPRITE_ID_NEW_TRAIN;
 speed: 16 km/h;
 misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT);
 cargo_age_period: 285;
 cargo_capacity: 12;
 cargo_allow_refit: [WOOD];
 default_cargo_type: WOOD;
 power: 0;
 running_cost_base: RUNNING_COST_STEAM;
        track_type: NG60;
        ai_engine_rank: 0;
        engine_class: ENGINE_CLASS_STEAM;
 weight: 1;
 length: 6;
        extra_weight_per_wagon: 0;
        visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
        bitmask_vehicle_info: 0;
    }

    graphics {
 default: sgroup_Woodtrailers_wood;
 purchase: spriteset_Woodtrailers_purchase;
 cargo_subtype_text: switch_car_livery_subtype_text;
 colour_mapping: switch_livery_subtype_mapping_cargo;
    }
}
# 39 "NG600mm.pnml" 2
# 1 "src/def_gondolacar.pnml" 1
//gondolacars
# 45 "src/def_gondolacar.pnml"
//CAR_STOCK(Wagon_Name, STR_W_NAME, c_capacity, idate, odate,  v_cost, v_r_c, v_vmax, v_mass, v_length)

# 1 "src/graphics/Opencar1.pnml" 1


spriteset(spriteset_Opencar1_purchase, "src/graphics/industrial_tram_wagons_1.png")
{ tmpl_sprite_purchase3mirror(140) }

spriteset(ss_Opencar1_empty, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(140) }

spriteset(ss_Opencar1_bulk2, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(160) }

spriteset(ss_Opencar1_bulk, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(180) }

spriteset(ss_Opencar1_wdpr, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(200) }

spritegroup sgroup_Opencar1_bulk {
    loaded: [ss_Opencar1_empty, ss_Opencar1_bulk2, ss_Opencar1_bulk];
    loading: [ss_Opencar1_empty, ss_Opencar1_bulk2, ss_Opencar1_bulk];
}

spritegroup sgroup_Opencar1_wdpr {
    loaded: [ss_Opencar1_empty, ss_Opencar1_wdpr, ss_Opencar1_wdpr];
    loading: [ss_Opencar1_empty, ss_Opencar1_wdpr];
}
# 48 "src/def_gondolacar.pnml" 2
item(FEAT_TRAINS, Opencar1) { property { name: string(STR_OPENCAR1); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1780, 1, 1); model_life: param_keep_old_vehs == 0 ? (1926 == 0 ? VEHICLE_NEVER_EXPIRES : 1926 -1780 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 6; running_cost_factor: 0; sprite_id: SPRITE_ID_NEW_TRAIN; speed: 15 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 5; refittable_cargo_classes: bitmask(CC_BULK); non_refittable_cargo_classes: bitmask(CC_REFRIGERATED,CC_PASSENGERS,CC_LIQUID,CC_COVERED); default_cargo_type: COAL; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 1; length: 3; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { WDPR: sgroup_Opencar1_wdpr; default: sgroup_Opencar1_bulk; purchase: spriteset_Opencar1_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_mapping_cargo; } }
# 1 "src/graphics/Opencar2.pnml" 1


spriteset(spriteset_Opencar2_purchase, "src/graphics/industrial_tram_wagons_2.png")
{ tmpl_sprite_purchase4mirror(140) }

spriteset(ss_Opencar2_empty, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block4mirror(140) }

spriteset(ss_Opencar2_bulk2, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block4mirror(160) }

spriteset(ss_Opencar2_bulk, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block4mirror(180) }

spriteset(ss_Opencar2_wdpr, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block4mirror(200) }

spritegroup sgroup_Opencar2_bulk {
    loaded: [ss_Opencar2_empty, ss_Opencar2_bulk2, ss_Opencar2_bulk];
    loading: [ss_Opencar2_empty, ss_Opencar2_bulk2, ss_Opencar2_bulk];
}

spritegroup sgroup_Opencar2_wdpr {
    loaded: [ss_Opencar2_empty, ss_Opencar2_wdpr, ss_Opencar2_wdpr];
    loading: [ss_Opencar2_empty, ss_Opencar2_wdpr];
}
# 50 "src/def_gondolacar.pnml" 2
item(FEAT_TRAINS, Opencar2) { property { name: string(STR_OPENCAR2); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1886, 1, 1); model_life: param_keep_old_vehs == 0 ? (1946 == 0 ? VEHICLE_NEVER_EXPIRES : 1946 -1886 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 10; running_cost_factor: 0; sprite_id: SPRITE_ID_NEW_TRAIN; speed: 20 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 7; refittable_cargo_classes: bitmask(CC_BULK); non_refittable_cargo_classes: bitmask(CC_REFRIGERATED,CC_PASSENGERS,CC_LIQUID,CC_COVERED); default_cargo_type: COAL; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 2; length: 4; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { WDPR: sgroup_Opencar2_wdpr; default: sgroup_Opencar2_bulk; purchase: spriteset_Opencar2_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_mapping_cargo; } }
# 1 "src/graphics/Opencar3.pnml" 1


spriteset(spriteset_Opencar3_purchase, "src/graphics/industrial_tram_wagons_3.png")
{ tmpl_sprite_purchase5mirror(140) }

spriteset(ss_Opencar3_empty, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(140) }

spriteset(ss_Opencar3_bulk2, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(160) }

spriteset(ss_Opencar3_bulk, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(180) }

spriteset(ss_Opencar3_wdpr, "src/graphics/industrial_tram_wagons_3.png") { tmpl_sprite_train_block5mirror(200) }

spritegroup sgroup_Opencar3_bulk {
    loaded: [ss_Opencar3_empty, ss_Opencar3_bulk2, ss_Opencar3_bulk];
    loading: [ss_Opencar3_empty, ss_Opencar3_bulk2, ss_Opencar3_bulk];
}


spritegroup sgroup_Opencar3_wdpr {
    loaded: [ss_Opencar3_empty, ss_Opencar3_wdpr, ss_Opencar3_wdpr];
    loading: [ss_Opencar3_empty, ss_Opencar3_wdpr];
}
# 52 "src/def_gondolacar.pnml" 2
item(FEAT_TRAINS, Opencar3) { property { name: string(STR_OPENCAR3); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1931, 1, 1); model_life: param_keep_old_vehs == 0 ? (1979 == 0 ? VEHICLE_NEVER_EXPIRES : 1979 -1931 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 15; running_cost_factor: 0; sprite_id: SPRITE_ID_NEW_TRAIN; speed: 30 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 10; refittable_cargo_classes: bitmask(CC_BULK); non_refittable_cargo_classes: bitmask(CC_REFRIGERATED,CC_PASSENGERS,CC_LIQUID,CC_COVERED); default_cargo_type: COAL; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 3; length: 5; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { WDPR: sgroup_Opencar3_wdpr; default: sgroup_Opencar3_bulk; purchase: spriteset_Opencar3_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_mapping_cargo; } }
# 1 "src/graphics/Opencar4.pnml" 1


spriteset(spriteset_Opencar4_purchase, "src/graphics/industrial_tram_wagons_4.png")
{ tmpl_sprite_purchase5mirror(140) }

spriteset(ss_Opencar4_empty, "src/graphics/industrial_tram_wagons_4.png") { tmpl_sprite_train_block5mirror(140) }

spriteset(ss_Opencar4_bulk, "src/graphics/industrial_tram_wagons_4.png") { tmpl_sprite_train_block5mirror(160) }

spriteset(ss_Opencar4_wdpr, "src/graphics/industrial_tram_wagons_4.png") { tmpl_sprite_train_block5mirror(180) }

spritegroup sgroup_Opencar4_bulk {
    loaded: [ss_Opencar4_empty, ss_Opencar4_bulk, ss_Opencar4_bulk];
    loading: [ss_Opencar4_empty, ss_Opencar4_bulk];
}

spritegroup sgroup_Opencar4_wdpr {
    loaded: [ss_Opencar4_empty, ss_Opencar4_wdpr, ss_Opencar4_wdpr];
    loading: [ss_Opencar4_empty, ss_Opencar4_wdpr];
}
# 54 "src/def_gondolacar.pnml" 2
item(FEAT_TRAINS, Opencar4) { property { name: string(STR_OPENCAR4); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1952, 1, 1); model_life: param_keep_old_vehs == 0 ? (0 == 0 ? VEHICLE_NEVER_EXPIRES : 0 -1952 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 5; cost_factor: 19; running_cost_factor: 1; sprite_id: SPRITE_ID_NEW_TRAIN; speed: 40 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 12; refittable_cargo_classes: bitmask(CC_BULK); non_refittable_cargo_classes: bitmask(CC_REFRIGERATED,CC_PASSENGERS,CC_LIQUID,CC_COVERED); default_cargo_type: COAL; power: 0; running_cost_base: RUNNING_COST_STEAM; track_type: NG60; ai_engine_rank: 0; engine_class: ENGINE_CLASS_STEAM; weight: 4; length: 6; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { WDPR: sgroup_Opencar4_wdpr; default: sgroup_Opencar4_bulk; purchase: spriteset_Opencar4_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_mapping_cargo; } }
# 40 "NG600mm.pnml" 2
# 1 "src/def_minecart.pnml" 1
//minecarts
# 43 "src/def_minecart.pnml"
//MINECART(Wagon_Name, STR_W_NAME, c_capacity, idate, odate, v_cost, v_vmax, v_mass, v_length)

# 1 "src/graphics/Minecart1.pnml" 1


spriteset(spriteset_Minecart1_purchase, "src/graphics/industrial_tram_wagons_1.png")
{ tmpl_sprite_purchase3mirror(220) }

spriteset(ss_Minecart1_empty, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(220) }

spriteset(ss_Minecart1_bulk, "src/graphics/industrial_tram_wagons_1.png") { tmpl_sprite_train_block3mirror(240) }

spritegroup sgroup_Minecart1_bulk {
    loaded: [ss_Minecart1_empty, ss_Minecart1_bulk];
    loading: [ss_Minecart1_empty, ss_Minecart1_bulk];
}
# 46 "src/def_minecart.pnml" 2
item(FEAT_TRAINS, Minecart1) { property { name: string(STR_MINECART1); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1700, 1, 1); model_life: param_keep_old_vehs == 0 ? (1866 == 0 ? VEHICLE_NEVER_EXPIRES : 1866 -1700 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 10; cost_factor: 3; running_cost_factor: 0; sprite_id: SPRITE_ID_NEW_TRAIN; speed: 9 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 4; refittable_cargo_classes: bitmask(CC_BULK); non_refittable_cargo_classes: bitmask(CC_REFRIGERATED,CC_PASSENGERS,CC_LIQUID,CC_COVERED,CC_NON_POURABLE,CC_PIECE_GOODS); default_cargo_type: COAL; power: 0; running_cost_base: RUNNING_COST_ELECTRIC; track_type: NG60; ai_engine_rank: 0; weight: 1; length: 3; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: sgroup_Minecart1_bulk; purchase: spriteset_Minecart1_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_mapping_cargo; } }

# 1 "src/graphics/Minecart2.pnml" 1


spriteset(spriteset_Minecart2_purchase, "src/graphics/industrial_tram_wagons_2.png")
{ tmpl_sprite_purchase3mirror(220) }

spriteset(ss_Minecart2_empty, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block3mirror(220) }

spriteset(ss_Minecart2_bulk, "src/graphics/industrial_tram_wagons_2.png") { tmpl_sprite_train_block3mirror(240) }

spritegroup sgroup_Minecart2_bulk {
    loaded: [ss_Minecart2_empty, ss_Minecart2_bulk];
    loading: [ss_Minecart2_empty, ss_Minecart2_bulk];
}
# 49 "src/def_minecart.pnml" 2
item(FEAT_TRAINS, Minecart2) { property { name: string(STR_MINECART2); climates_available: bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL); introduction_date: date(1850, 1, 1); model_life: param_keep_old_vehs == 0 ? (0 == 0 ? VEHICLE_NEVER_EXPIRES : 0 -1850 +4) : VEHICLE_NEVER_EXPIRES; vehicle_life: 20; retire_early: 0; reliability_decay: 20; loading_speed: 10; cost_factor: 6; running_cost_factor: 0; sprite_id: SPRITE_ID_NEW_TRAIN; speed: 15 km/h; misc_flags: bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_AUTOREFIT); cargo_age_period: 285; cargo_capacity: 6; refittable_cargo_classes: bitmask(CC_BULK); non_refittable_cargo_classes: bitmask(CC_REFRIGERATED,CC_PASSENGERS,CC_LIQUID,CC_COVERED,CC_NON_POURABLE,CC_PIECE_GOODS); default_cargo_type: COAL; power: 0; running_cost_base: RUNNING_COST_ELECTRIC; track_type: NG60; ai_engine_rank: 0; weight: 1; length: 3; extra_weight_per_wagon: 0; visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER); bitmask_vehicle_info: 0; } graphics { default: sgroup_Minecart2_bulk; purchase: spriteset_Minecart2_purchase; cargo_subtype_text: switch_car_livery_subtype_text; colour_mapping: switch_livery_subtype_mapping_cargo; } }
# 41 "NG600mm.pnml" 2
